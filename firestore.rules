/**
 * @file Firebase Security Rules for "El Pueblo Duerme" (Prototyping Mode)
 *
 * @core_philosophy This ruleset prioritizes strict authorization and rapid prototyping. It enforces a user-ownership model and role-based access where appropriate,
 * while relaxing data validation to allow for flexible data shapes during development.
 *
 * @data_structure
 * - /games/{gameId}: Stores game instances, accessible to game creators and players.
 * - /games/{gameId}/players/{userId}: Stores player data within a game, accessible to the specific user.
 * - /events/{eventId}: Stores game event logs, readable by all authenticated users, writable only by admins (simulated by checking user ID).
 *
 * @key_security_decisions
 * - User listing is disallowed.
 * - Data validation is minimized to focus on authorization during the prototyping phase.
 * - The ruleset leans towards stricter access control where relationships are ambiguous.
 * - Denormalization: The `Player` entity includes both `gameId` and `userId` which is helpful for setting rules.
 *
 * @denormalization_rationale
 * - Player Data: The `/games/{gameId}/players/{userId}` path includes both the `gameId` and `userId`. This denormalization is crucial for efficient
 *   security rules. Without it, checking a player's access to a game would require additional `get()` calls, which are slow and expensive.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows creating, reading, updating, and deleting games. Games are owned by their creator.
     * @path /games/{gameId}
     * @allow (create) request.auth != null && request.resource.data.creator == request.auth.uid
     * @allow (get, list) true
     * @allow (update, delete) request.auth != null && resource.data.creator == request.auth.uid
     * @deny (create) request.auth == null
     * @deny (update, delete) resource.data.creator != request.auth.uid
     * @principle Enforces document ownership for writes, allows public reads.
     */
    match /games/{gameId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.creator == request.auth.uid;
      allow update: if isSignedIn() && isExistingOwner(resource.data.creator);
      allow delete: if isSignedIn() && isExistingOwner(resource.data.creator);
    }

    /**
     * @description Allows reading, creating, updating, and deleting players within a game. Access is restricted to the specific user (player).
     * @path /games/{gameId}/players/{userId}
     * @allow (create) request.auth != null && request.auth.uid == userId
     * @allow (get, list) request.auth != null && request.auth.uid == userId
     * @allow (update, delete) request.auth != null && request.auth.uid == userId
     * @deny (create) request.auth == null || request.auth.uid != userId
     * @deny (get, list) request.auth == null || request.auth.uid != userId
     * @deny (update, delete) request.auth == null || request.auth.uid != userId
     * @principle Enforces user-specific access to player data within a game.
     */
    match /games/{gameId}/players/{userId} {
      allow get, list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Allows reading game event logs for authenticated users. Write access is denied for non-admins (simulated via UID check).
     * @path /events/{eventId}
     * @allow (get, list) true
     * @allow (create) if request.auth.uid == 'yzkSkzJ0ILaQA4vE75uhRR5cdLZ2'; // Simulate Admin User
     * @deny (create, update, delete) request.auth.uid != 'yzkSkzJ0ILaQA4vE75uhRR5cdLZ2'; // Simulate Admin User
     * @principle Restricts write access to game events to admins, allows public reads.
     */
    match /events/{eventId} {
      allow get, list: if true;
      allow create: if request.auth.uid == 'yzkSkzJ0ILaQA4vE75uhRR5cdLZ2'; // Simulate Admin User
      allow update, delete: if false;
    }

    // --- Helper Functions ---

    /**
     * @description Checks if the user is signed in.
     * @return {bool} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user ID matches the provided user ID.
     * @param {string} userId The user ID to compare against the authenticated user's ID.
     * @return {bool} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is the owner of an existing document.
     * @param {string} userId The user ID to compare against the authenticated user's ID.
     * @return {bool} True if the user is the owner and the resource exists, false otherwise.
     */
    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }
  }
}