/**
 * @file Firestore Security Rules for "El Pueblo Duerme"
 *
 * Core Philosophy:
 * This ruleset prioritizes security and authorization independence using data denormalization.
 * Read access is generally open to authenticated users, while write access is strictly controlled.
 *
 * Data Structure:
 * - /games/{gameId}: Stores game metadata.
 * - /games/{gameId}/players/{userId}: Stores player-specific data within a game.
 * - /games/{gameId}/logs/{logId}: Stores game logs (server-writeable only).
 *
 * Key Security Decisions:
 * - Denormalization: `gameId` is included in Player documents for independent authorization.
 * - Game Logs: Write access is exclusively for server-side components (e.g., Cloud Functions).
 * - Open Reads: `get` and `list` operations are broadly permitted for authenticated users to facilitate debugging and auditing.
 *
 * Denormalization for Authorization:
 * - The `Player` documents within `/games/{gameId}/players/{userId}` include the `gameId`, enabling rules to validate that the player belongs to the correct game without needing extra `get()` calls.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows reading any game data, and creating a game if the creator ID matches the authenticated user. Updating and deleting games are only allowed by the game creator.
     * @path /games/{gameId}
     * @allow (get, list): Any authenticated user can read game data.
     * @allow (create): User with auth.uid "user_abc" can create a game with creator: "user_abc".
     * @deny (create): User with auth.uid "user_xyz" cannot create a game with creator: "user_abc".
     * @allow (update, delete): User with auth.uid "user_abc" can update/delete a game they created.
     * @deny (update, delete): User with auth.uid "user_xyz" cannot update/delete a game created by "user_abc".
     * @principle Enforces game ownership for writes; allows public reads for authenticated users.
     */
    match /games/{gameId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn() && request.resource.data.creator == request.auth.uid;
      allow update: if isSignedIn() && isExistingOwner(resource.data.creator);
      allow delete: if isSignedIn() && isExistingOwner(resource.data.creator);
    }

    /**
     * @description Allows reading, creating, updating, and deleting player data only by the associated user within the game.
     * @path /games/{gameId}/players/{userId}
     * @allow (get, list): Any authenticated user can read player data.
     * @allow (create): User with auth.uid "user_abc" can create player data for themselves in game "game_123".
     * @deny (create): User with auth.uid "user_xyz" cannot create player data for "user_abc" in game "game_123".
     * @allow (update, delete): User with auth.uid "user_abc" can update/delete their own player data in game "game_123".
     * @deny (update, delete): User with auth.uid "user_xyz" cannot update/delete player data for "user_abc" in game "game_123".
     * @principle Enforces player ownership for writes within a specific game context.
     */
    match /games/{gameId}/players/{userId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid && request.resource.data.gameId == gameId;
      allow update: if isSignedIn() && isExistingPlayer(userId) && request.resource.data.userId == resource.data.userId && request.resource.data.gameId == gameId;
      allow delete: if isSignedIn() && isExistingPlayer(userId);
    }

    /**
     * @description Restricts write access to game logs to the server only. Allows any authenticated user to read logs for debugging/auditing.
     * @path /games/{gameId}/logs/{logId}
     * @allow (get, list): Any authenticated user can read game logs.
     * @deny (create, update, delete): No client-side creation, modification, or deletion of game logs.
     * @principle Enforces server-only writes to game logs for data integrity.
     */
    match /games/{gameId}/logs/{logId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    // --- Helper Functions ---

    /**
     * @description Checks if the user is signed in.
     * @return {boolean} True if the user is authenticated.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user is the owner of the resource.
     * @param {string} userId The user ID to compare against the authenticated user's ID.
     * @return {boolean} True if the user is the owner.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the user is the owner of the existing resource.
     * @param {string} userId The user ID to compare against the authenticated user's ID.
     * @return {boolean} True if the user is the owner and the resource exists.
     */
    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }

    /**
     * @description Checks if the user is the player of the existing resource.
     * @param {string} userId The user ID to compare against the authenticated user's ID.
     * @return {boolean} True if the user is the player and the resource exists.
     */
    function isExistingPlayer(userId) {
        return isOwner(userId) && resource != null;
    }
  }
}