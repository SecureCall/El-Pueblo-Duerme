/**
 * @file Firestore Security Rules
 * @description This ruleset defines access control for the "El Pueblo Duerme" application.
 *
 * Core Philosophy:
 *  - Enforce a combination of ownership-based and shared access control.
 *  - Prioritize secure defaults, restricting access unless explicitly allowed.
 *  - Focus on authorization and relational integrity. Defer complex data validation.
 *
 * Data Structure:
 *  - `/games/{gameId}`: Stores game instances, with the `creator` field indicating ownership.
 *  - `/games/{gameId}/players/{userId}`: Stores player data within a game, linking users to games.
 *  - `/events/{eventId}`: Stores all events (logs) related to games.
 *
 * Key Security Decisions:
 *  - Games: Games are only creatable and modifiable by the user with matching `creator` field.
 *  - Players: Player documents can only be created with a matching `userId` and are generally secured by game ownership.
 *  - Events: Read access is public (authenticated users), write access is denied.
 *  - No User Listing: Listing all users is disallowed to protect privacy.
 *
 * Denormalization for Authorization:
 *  - The 'Player' entity contains both 'gameId' and 'userId' which allows player-scoped rules to be written independently.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows reading and creating Game documents. Only the creator can update or delete.
     * @path /games/{gameId}
     * @allow (create) - Authenticated user can create a game if the `creator` field matches their `uid`.
     * @allow (get, list) - Any authenticated user can read game details.
     * @deny (update, delete) - Any user cannot update or delete a game if not creator.
     * @principle Enforces document ownership for writes; public read access for authenticated users.
     */
    match /games/{gameId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(creatorId) {
        return isSignedIn() && request.auth.uid == creatorId;
      }

      function isExistingOwner() {
        return isSignedIn() && resource.data.creator == request.auth.uid;
      }

      allow get, list: if isSignedIn();
      allow create: if isSignedIn() && request.resource.data.creator == request.auth.uid;
      allow update: if isExistingOwner();
      allow delete: if isExistingOwner();
    }

    /**
     * @description Allows reading, creating, updating, and deleting Player documents within a specific game.
     * @path /games/{gameId}/players/{userId}
     * @allow (create) - Authenticated user can create a player document if the 'userId' matches their 'uid'.
     * @allow (get, list) - Any user can read player details.
     * @deny (update, delete) - Any user cannot update or delete a player if not game creator.
     * @principle Enforces document ownership for writes; public read access.
     */
    match /games/{gameId}/players/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isPlayer() {
        return request.auth.uid == userId;
      }

      function isExistingPlayer() {
        return isSignedIn() && resource.data.userId == request.auth.uid;
      }

      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if isSignedIn() && isExistingPlayer();
      allow delete: if isSignedIn() && isExistingPlayer();
    }

    /**
     * @description Allows reading GameEvent documents, but only allows server-side creation.
     * @path /events/{eventId}
     * @allow (get, list) - Any authenticated user can read event details.
     * @deny (create, update, delete) - No user can create, update, or delete events.
     * @principle Restricts write access to game logs while providing public read access for authenticated users.
     */
    match /events/{eventId} {
      function isSignedIn() {
        return request.auth != null;
      }
      allow get, list: if isSignedIn();
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

        /**
     * @description  Denies all access to subcollection `/games/{gameId}/events/{eventId}`.
     * @path `/games/{gameId}/events/{eventId}`
     * @allow (get) - No one can get the document.
     * @allow (list) - No one can list the document.
     * @allow (create) - No one can create the document.
     * @allow (update) - No one can update the document.
     * @allow (delete) - No one can delete the document.
     * @principle Events documents can only be created through a trusted environment.
     */
    match /games/{gameId}/events/{eventId} {
        allow get: if false;
        allow list: if false;
        allow create: if false;
        allow update: if false;
        allow delete: if false;
    }
  }
}