/**
 * @file Firestore Security Rules for El Pueblo Duerme.
 *
 * @corePhilosophy
 * This ruleset prioritizes strong authorization based on user identity and game ownership.
 * It grants authenticated users the ability to read publicly available game events,
 * while restricting write access to game-related data based on ownership and roles.
 *
 * @dataStructure
 * - /games/{gameId}: Stores game metadata, accessible only to authenticated users, with write access restricted to the game creator.
 * - /games/{gameId}/players/{userId}: Stores player-specific data within a game, accessible and modifiable only by the user (player) themselves.
 * - /events/{eventId}: Stores game events, publicly readable but writable by nobody (in this initial version)
 *
 * @keySecurityDecisions
 * - User listing is disallowed.
 * - Public read access is granted for the `/events` collection.
 * - Write access to `/events` is initially denied to all users.
 *
 * @denormalizationForAuthorization
 * - Player documents contain both `gameId` and `userId` to enable independent authorization checks within the `/games/{gameId}/players/{userId}` path.
 *   This denormalization avoids the need for costly `get()` operations to verify game membership during player data reads and writes.
 *
 * @structuralSegregation
 * - Game-specific data (players, events) is stored in subcollections under the `/games/{gameId}` document.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the current user is signed in.
     * @return {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the current user is the owner of the resource.
     * @param {string} userId - The user ID to compare against the authenticated user's ID.
     * @return {boolean} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

        /**
     * @description Checks if the current user is the existing owner of the resource.
     * @param {string} userId - The user ID to compare against the authenticated user's ID.
     * @return {boolean} True if the user is the owner and the resource exists, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Defines rules for the /games/{gameId} collection.
     * @path /games/{gameId}
     * @allow (create) - Authenticated user can create a game if the creator field matches their user ID.
     * @allow (update) - Authenticated user can update a game if they are the creator.
     * @deny (create) - Non-authenticated user cannot create a game.
     * @deny (update) - Authenticated user cannot update a game if they are not the creator.
     * @principle Enforces document ownership for writes.
     */
    match /games/{gameId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn() && request.resource.data.creator == request.auth.uid;
      allow update: if isExistingOwner(resource.data.creator);
      allow delete: if false;
    }

    /**
     * @description Defines rules for the /games/{gameId}/players/{userId} collection.
     * @path /games/{gameId}/players/{userId}
     * @allow (create) - User can create their own player document under the correct game.
     * @allow (update) - User can update their own player document.
     * @deny (create) - User cannot create a player document for another user.
     * @deny (update) - User cannot update another user's player document.
     * @principle Enforces ownership and read/write access to a user's own data.
     */
    match /games/{gameId}/players/{userId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == request.auth.uid;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if false;
    }

    /**
     * @description Defines rules for the /events/{eventId} collection.
     * @path /events/{eventId}
     * @allow (get, list) - Any authenticated user can read events.
     * @deny (create, update, delete) - No user can create, update, or delete events.
     * @principle Public read, restricted write access.
     */
    match /events/{eventId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }
  }
}