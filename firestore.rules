/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a role-based access control model for the "El Pueblo Duerme" application.
 *
 * Data Structure:
 * - /games/{gameId}: Stores game instances.
 * - /games/{gameId}/players/{userId}: Stores player data for each game.
 * - /events/{eventId}: Stores game logs.
 *
 * Key Security Decisions:
 * - Games: Only the game creator can update or delete a game.  Any authenicated user can read.
 * - Players: Read and write access to player data is restricted to the player themselves.
 * - Game Events: Read access to the game event subcollection is allowed for authenticated users. Write access is denied.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to the /games/{gameId} collection.
     * @path /games/{gameId}
     * @allow (get, list) Any authenticated user can read any game.
     * @allow (create) Any authenticated user can create a game, if the creator field matches their UID.
     * @allow (update, delete) Only the game creator can modify or delete the game.
     * @deny Any unauthenticated user cannot create, update, or delete a game.
     * @principle Enforces owner-only writes with public reads for games.
     */
    match /games/{gameId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.creator == request.auth.uid;
      allow update, delete: if isSignedIn() && isExistingOwner(resource.data.creator);
    }

    /**
     * @description Controls access to the /games/{gameId}/players/{userId} collection.
     * @path /games/{gameId}/players/{userId}
     * @allow (get, list) Only the player can read their own player document.
     * @allow (create) A user can create their player document if their userId matches the document ID.
     * @allow (update, delete) Only the player can modify or delete their own player document.
     * @deny A user cannot create a player document for another user.
     * @principle Enforces strict user ownership for player data within a specific game.
     */
    match /games/{gameId}/players/{userId} {
      allow get, list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update, delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Controls access to the /games/{gameId}/events collection.
     * @path /games/{gameId}/events
     * @allow (get, list) Any authenticated user can read game events.
     * @deny (create, update, delete) No user can create, update, or delete game events.
     * @principle Provides public read-only access to game events for authenticated users.
     */
    match /games/{gameId}/events/{eventId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if false;
    }

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }
  }
}