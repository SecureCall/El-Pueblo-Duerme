
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isPlayerInGame(gameId) {
      return isSignedIn() && get(/databases/$(database)/documents/games/$(gameId)).data.players.exists(p, p.userId == request.auth.uid);
    }
    
    function isCreator(gameId) {
        return isSignedIn() && get(/databases/$(database)/documents/games/$(gameId)).data.creator == request.auth.uid;
    }

    function isPlayerAlive(gameId) {
        let player = get(/databases/$(database)/documents/games/$(gameId)).data.players.get(p, p.userId == request.auth.uid, null);
        return player != null && player.isAlive == true;
    }

    match /games/{gameId} {
      // Anyone can read game data to join or spectate.
      allow read: if true;

      // Only authenticated users can create a new game.
      allow create: if isSignedIn();
      
      // Update permissions are highly granular.
      allow update: if 
        // A user must be a signed-in player in this specific game to update it.
        isPlayerInGame(gameId) &&
        (
            // --- Lobby Phase ---
            // Allow joining/leaving/updating display name only in 'waiting' status.
            (
                resource.data.status == 'waiting' &&
                (
                    // Joining: Adding self to players array
                    request.resource.data.players.size() == resource.data.players.size() + 1 &&
                    request.resource.data.players.diff(resource.data.players).addedKeys().hasOnly([request.auth.uid])
                ) || (
                    // Updating own player data (e.g., displayName, avatarUrl) in lobby
                    request.resource.data.players.size() == resource.data.players.size() &&
                    request.resource.data.players.diff(resource.data.players).affectedKeys().hasOnly([request.auth.uid]) &&
                    request.resource.data.players.get(p, p.userId == request.auth.uid, null).role == null // Cannot change role
                )
            ) ||
            // --- Game Start ---
            // Only the creator can start the game.
            (
                isCreator(gameId) &&
                resource.data.status == 'waiting' &&
                request.resource.data.status == 'in_progress'
            ) ||
            // --- Gameplay Actions ---
            (
                resource.data.status == 'in_progress' &&
                isPlayerAlive(gameId) &&
                (
                    // Voting: Can only set 'votedFor' during the 'day' phase.
                    (
                        request.resource.data.phase == 'day' &&
                        request.resource.data.players.diff(resource.data.players).affectedKeys().hasOnly([request.auth.uid]) &&
                        request.resource.data.players.get(p, p.userId == request.auth.uid, null).votedFor != resource.data.players.get(p, p.userId == request.auth.uid, null).votedFor
                    ) ||
                    // Night Action: Can only set 'usedNightAbility' during 'night' phase.
                    (
                        request.resource.data.phase == 'night' &&
                        request.resource.data.players.diff(resource.data.players).affectedKeys().hasOnly([request.auth.uid]) &&
                        request.resource.data.players.get(p, p.userId == request.auth.uid, null).usedNightAbility == true
                    )
                ) &&
                // Critical fields that players should NEVER be able to change.
                request.resource.data.players.get(p, p.userId == request.auth.uid, null).role == resource.data.players.get(p, p.userId == request.auth.uid, null).role &&
                request.resource.data.players.get(p, p.userId == request.auth.uid, null).isAlive == resource.data.players.get(p, p.userId == request.auth.uid, null).isAlive &&
                request.resource.data.players.get(p, p.userId == request.auth.uid, null).isLover == resource.data.players.get(p, p.userId == request.auth.uid, null).isLover &&
                request.resource.data.players.get(p, p.userId == request.auth.uid, null).isCultMember == resource.data.players.get(p, p.userId == request.auth.uid, null).isCultMember
            ) ||
            // --- Resetting Game ---
            // Only the creator can reset the game when it's finished.
            (
                isCreator(gameId) &&
                resource.data.status == 'finished' &&
                request.resource.data.status == 'waiting'
            )
        );
    }
  }
}
