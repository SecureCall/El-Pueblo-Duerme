/**
 * @file Overview
 * This ruleset enforces a role-based access control model for the "El Pueblo Duerme" game application.
 *
 * Data Structure:
 * - /games/{gameId}: Stores game instances.
 * - /games/{gameId}/players/{userId}: Stores player-specific data for each game.
 * - /games/{gameId}/logs/{logId}: Stores game logs.
 *
 * Key Security Decisions:
 * - Games are publicly readable but only the creator can modify them.
 * - Players can only access their own data within a game.
 * - Game logs are readable by any authenticated user, but writable only by backend services.
 * - Authorization Independence is achieved through denormalization of gameId on player documents.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to game documents.
     * @path /games/{gameId}
     * @allow (get, list): Any authenticated user can read game data.
     * @allow (create): The user creating the game must set themself as the creator.
     * @allow (update, delete): Only the game creator can modify game data.
     * @deny create: if the creator field does not match the request.auth.uid.
     * @deny update: if the user is not the creator.
     * @deny delete: if the user is not the creator.
     * @principle Public Read with Owner-Only Writes.
     */
    match /games/{gameId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.creator == request.auth.uid;
      allow update, delete: if isSignedIn() && isExistingOwner(resource.data.creator);
    }

    /**
     * @description Controls access to player documents within a specific game.
     * @path /games/{gameId}/players/{userId}
     * @allow (get, list): A player can only read their own data within a game.
     * @allow (create): A player can create their own record if the userId matches request.auth.uid.
     * @allow (update, delete): A player can only update/delete their own data within a game.
     * @deny create: if the userId field does not match the request.auth.uid.
     * @deny update: if the userId field does not match the request.auth.uid.
     * @deny delete: if the userId field does not match the request.auth.uid.
     * @principle Ownership.
     */
    match /games/{gameId}/players/{userId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn();
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == request.auth.uid;
      allow update, delete: if isSignedIn() && isExistingOwner(userId) && resource.data.userId == request.auth.uid;
    }

    /**
     * @description Controls access to game log documents.
     * @path /games/{gameId}/logs/{logId}
     * @allow (get, list): Any authenticated user can read the logs.
     * @allow (create, update, delete): Only backend services can write logs.
     * @principle Read-Only Collection with Server-Side Writes.
     */
    match /games/{gameId}/logs/{logId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if false;
    }

    // ---- Helper functions ----

    /**
     * @description Checks if the user is signed in.
     * @return {bool} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user is the owner of the document.
     * @param {string} userId - The user ID to compare against.
     * @return {bool} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the user is the existing owner of the document and the document exists.
     * @param {string} userId - The user ID to compare against.
     * @return {bool} True if the user is the owner and the document exists, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }
  }
}