/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a role-based access control model for the "El Pueblo Duerme" application.
 *
 * Data Structure:
 * - /games/{gameId}: Stores game instances.
 * - /games/{gameId}/players/{userId}: Stores player data for each game.
 * - /events/{eventId}: Stores game logs.
 *
 * Key Security Decisions:
 * - Users can only create games.
 * - Players can only read their own player documents within a game.
 * - Game events are publicly readable, but only writeable by a server process.
 * - Data validation is limited to authorization-critical fields for prototyping.
 *
 * Denormalization for Authorization:
 * - Player documents include the `gameId`, enabling independent authorization without needing to traverse to the parent `game` document.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Manages access to game documents. Only authenticated users can create games.
     * @path /games/{gameId}
     * @allow (create) Signed-in user can create a new game.
     * @deny (create) Anonymous user cannot create a new game.
     * @allow (get, list) Anyone can read game information.
     * @deny (update, delete) No one can update or delete a game.
     * @principle Allows any authenticated user to create game documents. Only authenticated users can read the document.
     */
    match /games/{gameId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update, delete: if false;
    }

    /**
     * @description Manages access to player documents within a game. Players can only read their own documents.
     * @path /games/{gameId}/players/{userId}
     * @allow (get) Signed-in user can get their player document if the userId matches their auth.uid.
     * @deny (get) Signed-in user cannot get another player's document.
     * @allow (create) Signed-in user can create a player document if the userId matches their auth.uid.
     * @deny (create) Signed-in user cannot create a player document for another user.
     * @allow (list) Only the owner can list.
     * @deny (update, delete) No one can update or delete player documents directly.
     * @principle Enforces user-ownership for player documents within a game.
     */
    match /games/{gameId}/players/{userId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow update, delete: if false;
    }

    /**
     * @description Manages access to game event logs. Publicly readable, but only writeable by a trusted process.
     * @path /events/{eventId}
     * @allow (get, list) Anyone can read game events.
     * @deny (create, update, delete) No client can create, update, or delete events.
     * @principle Public read access for game event logs; write access is restricted.
     */
    match /events/{eventId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    // --- Helper Functions ---

    /**
     * @description Checks if the user is signed in.
     * @return {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the requesting user is the owner of the resource based on the provided userId.
     * @param {string} userId - The user ID to compare against the authenticated user's ID.
     * @return {boolean} True if the requesting user's ID matches the provided userId, false otherwise.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
  }
}