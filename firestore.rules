/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a role-based access control model for the 'El Pueblo Duerme' application.
 *
 * Data Structure:
 * - /games/{gameId}: Stores game instances.
 * - /games/{gameId}/players/{userId}: Stores player data for each game.
 * - /games/{gameId}/events/{eventId}: Stores game events/logs (Chronological order is not guaranteed by the data structure).
 * - /users/{userId}: Stores user profiles (managed externally, read-only).
 *
 * Key Security Decisions:
 * - Users can only read and write their own user documents (/users/{userId}).
 * - Games can only be created by authenticated users.  Only members of a game can access its data and events.
 * - Prevents listing of the /users collection.
 * - All write operations validate that the authenticated user ID matches the expected document ID in the path.
 *
 * Denormalization for Authorization:
 * - The 'Player' entity denormalizes 'gameId' to enable independent security rules.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Grants read and write access to a specific user's document.
     * @path /users/{userId}
     * @allow (create) User with ID 'user123' can create their own profile.
     * @deny (create) User with ID 'user456' cannot create a profile for 'user123'.
     * @principle Enforces user-ownership for profile data.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Manages access to game instances. Games can only be created by authenticated users.
     * @path /games/{gameId}
     * @allow (create) Authenticated user can create a game.
     * @deny (update) Anonymous user cannot update a game.
     * @principle Enforces authentication for game creation.
     */
    match /games/{gameId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isGameMember(gameId) {
        return exists(/databases/$(database)/documents/games/$(gameId)/players/$(request.auth.uid));
      }
      allow get: if isSignedIn() && isGameMember(gameId);
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn() && isGameMember(gameId);
      allow delete: if isSignedIn() && isGameMember(gameId);

       /**
         * @description Controls access to game events (logs).
         * @path /games/{gameId}/events/{eventId}
         * @allow (list) Authenticated members of the game can access events.
         * @deny (create) Non-members cannot create events.
         * @principle Restricts event access to game members.
         */
        match /games/{gameId}/events/{eventId} {
            function isSignedIn() {
                return request.auth != null;
            }
            function isGameMember(gameId) {
              return exists(/databases/$(database)/documents/games/$(gameId)/players/$(request.auth.uid));
            }
            allow get: if isSignedIn() && isGameMember(gameId);
            allow list: if isSignedIn() && isGameMember(gameId);
            allow create: if isSignedIn() && isGameMember(gameId);
            allow update: if isSignedIn() && isGameMember(gameId);
            allow delete: if isSignedIn() && isGameMember(gameId);
        }

      /**
         * @description Controls access to game players.
         * @path /games/{gameId}/players/{userId}
         * @allow (create) Authenticated members of the game can access players.
         * @deny (create) Non-members cannot create players.
         * @principle Restricts player access to game members.
         */
        match /games/{gameId}/players/{userId} {
            function isSignedIn() {
                return request.auth != null;
            }
            function isOwner(userId) {
              return request.auth.uid == userId;
            }
            function isGameMember(gameId) {
              return exists(/databases/$(database)/documents/games/$(gameId)/players/$(request.auth.uid));
            }
            allow get: if isSignedIn() && isGameMember(gameId);
            allow list: if isSignedIn() && isGameMember(gameId);
            allow create: if isSignedIn() && isGameMember(gameId) && isOwner(userId);
            allow update: if isSignedIn() && isGameMember(gameId) && isOwner(userId);
            allow delete: if isSignedIn() && isGameMember(gameId) && isOwner(userId);
        }
    }

    /**
     * @description Controls access to top-level game events (logs).
     * @path /events/{eventId}
     * @allow (get, list) Any authenticated user can read game events.
     * @deny (create, update, delete) No one can modify game events directly.
     * @principle Grants public read access to game events but restricts write access.
     */
     match /events/{eventId} {
        function isSignedIn() {
            return request.auth != null;
        }
        allow get: if isSignedIn();
        allow list: if isSignedIn();
        allow create: if false;
        allow update: if false;
        allow delete: if false;
     }
  }
}