/**
 * @fileOverview Firestore Security Rules for "El Pueblo Duerme" application.
 *
 * Core Philosophy:
 * This ruleset prioritizes secure access to game data, ensuring that only authorized users can read and modify specific game information.
 * Authentication is required for all write operations. Read access to game messages is restricted to authenticated users.
 *
 * Data Structure:
 * - /games/{gameId}: Stores the main game documents.
 * - /games/{gameId}/messages: Stores messages related to a specific game.
 *
 * Key Security Decisions:
 * - Users must be authenticated to access game messages.
 * - List access is limited to the owner for user-scoped data.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows authenticated users to list messages for a specific game.
     * @path /games/{gameId}/messages
     * @allow (list) - Authenticated user can list messages
     * @deny (list) - Unauthenticated user cannot list messages
     * @principle Authenticated users can only view messages.
     */
    match /games/{gameId}/messages/{messageId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Secure games collection.
     * @path /games/{gameId}
     * @allow (get, list) - Any user can read game data.
     * @allow (create) - Authenticated user can create a game with creatorId matching their UID.
     * @allow (update, delete) - Only the game creator can modify or delete the game.
     * @deny (create) - Game creation fails if the creatorId doesn't match the authenticated user's UID.
     * @deny (update, delete) - Non-creators are denied from modifying or deleting the game.
     * @principle Public read, owner-only writes, and relational integrity on creatorId.
     */
    match /games/{gameId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && request.resource.data.creator == request.auth.uid;
      allow update: if isExistingOwner(resource.data.creator);
      allow delete: if isExistingOwner(resource.data.creator);
    }

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }
  }
}