/**
 * @file Firestore Security Rules for El Pueblo Duerme (Prototyping Mode)
 *
 * @core_philosophy This ruleset enforces a strict user-ownership model for games,
 *  allowing only the creator to modify game settings or delete the game. Game
 *  data is generally private, with read access granted only to players in the game.
 *  This mode is flexible on data shapes to allow for rapid iteration.
 *
 * @data_structure
 *  - /games/{gameId}: Stores game instances.
 *  - Games contain players and events as denormalized arrays within the document.
 *
 * @key_security_decisions
 *  - Game listing is publicly available.
 *  - Only the game creator can modify game settings or delete a game.
 *  - Read access to game data is restricted to players in the game.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Manages access to individual game documents.
     * @path /games/{gameId}
     * @allow (create) User creates a game with their ID as the creator.
     * @allow (get, list) Any user can read or list games.
     * @allow (update, delete) Only the game creator can update or delete the game.
     * @deny (create) User attempts to create a game with a mismatched creator ID.
     * @deny (update, delete) User attempts to update or delete a game they did not create.
     * @principle Enforces ownership for game modifications and deletion.
     */
    match /games/{gameId} {
      // Anyone can read game data.
      allow get, list: if true;

      // Only the creator can create a game, and the creator field must match their UID.
      allow create: if isSignedIn() && request.resource.data.creator == request.auth.uid;

      // Only the creator can update a game.
      allow update: if isSignedIn() && isExistingOwner(resource.data.creator);

      // Only the creator can delete a game.
      allow delete: if isSignedIn() && isExistingOwner(resource.data.creator);
    }

    // --- Helper Functions ---
    /**
     * @description Checks if the user is signed in.
     * @return True if the user is authenticated, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user is the owner of the resource.
     * @param {string} userId The user ID to compare with the request's authentication UID.
     * @return True if the user ID matches the authentication UID, false otherwise.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

     /**
      * @description Check if the user is the owner of the resource and that the resource exists.
      * @param {string} userId The user ID to compare with the resource owner.
      * @return True if the user is the owner and the resource exists, false otherwise.
      */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }
  }
}