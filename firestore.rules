/**
 * @file Firebase Security Rules for El Pueblo Duerme.
 *
 * @corePhilosophy This ruleset prioritizes security by enforcing strict access control based on user authentication and resource ownership. It avoids overly complex validation in favor of rapid iteration and relies on denormalization to ensure authorization decisions are efficient.
 * @dataStructure The data is organized into a top-level `games` collection, each containing a `players` subcollection. Game events are stored in a top-level `events` collection.
 * @keySecurityDecisions
 *   - Users can only list players within a game they are participating in.
 *   - Game events are readable by any authenticated user, but write access is implicitly denied by not providing write rules.
 *   - Extensive data validation is omitted in favor of faster prototyping; only authorization-critical fields are checked.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to the `games` collection.
     * @path /games/{gameId}
     * @allow (create) - Authenticated user can create a game with their `uid` as the `creator`.
     * @allow (get, list) - Not applicable at this level, listing is not allowed at the root.
     * @allow (update, delete) - Authenticated user can update/delete a game where they are the `creator`.
     * @deny (create) - If the creator field does not match the authenticated user's ID.
     * @deny (update, delete) - If the authenticated user is not the creator of the game.
     * @principle Enforces ownership for game creation and modification.
     */
    match /games/{gameId} {
      allow get: if true;
      allow list: if false;
      allow create: if isSignedIn() && request.resource.data.creator == request.auth.uid;
      allow update: if isSignedIn() && resource.data.creator == request.auth.uid && resource != null;
      allow delete: if isSignedIn() && resource.data.creator == request.auth.uid && resource != null;
    }

    /**
     * @description Controls access to the `players` subcollection within a game.
     * @path /games/{gameId}/players/{userId}
     * @allow (create) - Authenticated user can create a player document where their `uid` matches the `userId` in the path.
     * @allow (get, list) - Authenticated user can list players within a game.
     * @allow (update, delete) - Authenticated user can update/delete their own player document.
     * @deny (create) - If the `userId` in the path does not match the authenticated user's `uid`.
     * @deny (update, delete) - If the authenticated user is not the owner of the player document.
     * @principle Enforces user-specific access to player data within a game.
     */
    match /games/{gameId}/players/{userId} {
      allow get: if true;
      allow list: if isSignedIn();
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update: if isSignedIn() && request.auth.uid == userId  && resource != null;
      allow delete: if isSignedIn() && request.auth.uid == userId && resource != null;
    }

        /**
     * @description Controls access to the `events` collection.
     * @path /events/{eventId}
     * @allow (get, list) - Authenticated user can read from the events collection.
     * @deny (create, update, delete) - No write access is granted.
     * @principle Allows read-only access to game events for all authenticated users.
     */
    match /events/{eventId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }
  }

  function isSignedIn() {
    return request.auth != null;
  }
}