/**
 * @fileoverview Firestore Security Rules for El Pueblo Duerme.
 *
 * Core Philosophy:
 * This ruleset prioritizes secure authorization based on user identity and data relationships.
 * It enforces ownership and access control at various levels, ensuring that users can only
 * modify data they own or are explicitly authorized to access. Data schema validation is
 * relaxed to allow for rapid prototyping and iteration.
 *
 * Data Structure:
 * - /games/{gameId}: Stores game instances. The creator field indicates the user who created the game.
 * - /games/{gameId}/players/{userId}: Stores player data for each game. Includes denormalized 'gameId' for authorization independence.
 * - /events/{eventId}: Stores game logs. Write access is restricted. Read access is granted to any authenticated user.
 *
 * Key Security Decisions:
 * - Players can only create their own player document within a game.
 * - Game events can be read by anyone authenticated.
 * - Strong ownership is enforced for game creation, modification, and deletion.
 *
 * Denormalization for Authorization:
 * - The Player document includes the gameId field. This is essential for writing rules at /games/{gameId}/players/{playerId}
 *   without needing to perform expensive `get()` operations to fetch the parent Game document.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is authenticated.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user is the owner of the resource.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is the owner of the existing resource.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Rules for the /games/{gameId} collection.
     * @path /games/{gameId}
     * @allow (create) Signed-in user can create a game where the creator field matches their UID.
     * @allow (get, list) Anyone can read game data.
     * @allow (update, delete) Only the game creator can update or delete a game.
     * @deny (create) User tries to create a game with a creator field that doesn't match their UID.
     * @principle Enforces ownership for game creation, modification, and deletion.
     */
    match /games/{gameId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.creator == request.auth.uid;
      allow update, delete: if isSignedIn() && isExistingOwner(resource.data.creator);
    }

    /**
     * @description Rules for the /games/{gameId}/players/{userId} subcollection.
     * @path /games/{gameId}/players/{userId}
     * @allow (create) Signed-in user can create their own player document within a game.
     * @allow (get, list) Anyone can read player data.
     * @allow (update, delete) Not allowed.
     * @deny (create) User tries to create a player document for another user.
     * @principle Enforces that a player can only create their own document, and prevents modification/deletion.
     */
    match /games/{gameId}/players/{userId} {
      allow get, list: if true;
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == request.auth.uid && request.resource.data.gameId == gameId;
      allow update, delete: if false;
    }

    /**
     * @description Rules for the /events/{eventId} collection.
     * @path /events/{eventId}
     * @allow (get, list) Anyone can read game event data.
     * @allow (create, update, delete) No one can create, update, or delete game events through the client.
     * @principle Restricts write access to game events to the server only; allows public read access.
     */
    match /events/{eventId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if false;
    }
  }
}