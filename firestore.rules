/**
 * @description This ruleset enforces a role-based access control model for the "El Pueblo Duerme" game application.
 * All authorization decisions are based on the authenticated user's identity (`request.auth`).
 * @dataStructure
 * - `/games/{gameId}`: Stores general game information, including the game creator.
 * - `/games/{gameId}/players/{userId}`: Stores player-specific data, with `gameId` denormalized for authorization.
 * - `/games/{gameId}/logs/{logId}`: Stores game logs; write access is restricted to the server.
 * @keySecurityDecisions
 * - Players can only access their own data within a game (ownership within the `/games/{gameId}/players/{userId}` path).
 * - Game creation/modification is restricted to the game creator.
 * - Game logs are write-protected, allowing only server-side modifications.
 * - Public listing of Games is enabled via `allow list: if true;`.
 * @denormalizationForAuthorization
 * - The `Player` entity includes a denormalized `gameId` field to allow rules on `/games/{gameId}/players/{userId}` to validate game membership without additional reads.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows reading any game, and only the creator can modify a game.
     * @path /games/{gameId}
     * @allow (get, list): if true
     * @allow (create): if request.auth != null && request.resource.data.creator == request.auth.uid
     * @allow (update, delete): if isSignedIn() && resource.data.creator == request.auth.uid
     * @deny (create): if request.auth == null
     * @deny (update, delete): if !isExistingOwner(resource.data.creator)
     * @principle Enforces document ownership for writes. Allows public reads.
     */
    match /games/{gameId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.creator == request.auth.uid;
      allow update: if isExistingOwner(resource.data.creator);
      allow delete: if isExistingOwner(resource.data.creator);
    }

    /**
     * @description Allows players to only access their own player data within a specific game.
     * @path /games/{gameId}/players/{userId}
     * @allow (get, list): if isOwner(userId)
     * @allow (create): if isOwner(userId) && request.resource.data.gameId == gameId && request.resource.data.userId == userId
     * @allow (update, delete): if isExistingOwner(userId) && request.resource.data.gameId == gameId
     * @deny (create): if !isOwner(userId) || request.resource.data.gameId != gameId || request.resource.data.userId != userId
     * @deny (update, delete): if !isExistingOwner(userId) || request.resource.data.gameId != gameId
     * @principle Restricts access to a user's own data within the /games/{gameId}/players/{userId} path.
     */
    match /games/{gameId}/players/{userId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.gameId == gameId && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.gameId == gameId;
      allow delete: if isExistingOwner(userId) && request.resource.data.gameId == gameId;
    }

    /**
     * @description Restricts write access to game logs to the server, while allowing any authenticated user to read them.
     * @path /games/{gameId}/logs/{logId}
     * @allow (get, list): if isSignedIn()
     * @allow (create, update, delete): if false;
     * @deny (get, list): if !isSignedIn()
     * @principle Enforces server-only writes for game logs.
     */
    match /games/{gameId}/logs/{logId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if false;
    }

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }
  }
}