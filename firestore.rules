/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a shared-access model for games, where any authenticated user can read game details and a specific set of players have write access.
 * All write operations are limited to authenticated users.
 *
 * Data Structure:
 * - /games/{gameId}: Stores game metadata.
 * - /games/{gameId}/players/{userId}: Stores player-specific data within a game.
 * - /events/{eventId}: Stores game events; read access is public for authenticated users, while write access is restricted.
 *
 * Key Security Decisions:
 * - Games are shared between players. Read and write access is controlled by the players list in the /games/{gameId} document.
 * - The creator of a game is considered an owner and has write access.
 * - Listing of all users is disallowed.
 *
 * Denormalization for Authorization:
 * - The `Player` entity includes the `gameId` to ensure that rules for players can be evaluated independently of the game document.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows read and limited write access to game documents.
     * @path /games/{gameId}
     * @allow (get, list) if true
     * @allow (create) if isSignedIn() && request.resource.data.creator == request.auth.uid
     * @allow (update, delete) if isSignedIn() && resource.data.players.hasAny([request.auth.uid])
     * @deny (create) if !isSignedIn()
     * @deny (update, delete) if !isSignedIn()
     * @principle Allows any signed-in user to read any game, creator can create the game, and players can update/delete the game.
     */
    match /games/{gameId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.creator == request.auth.uid;
      allow update, delete: if isSignedIn() && resource.data.players.hasAny([request.auth.uid]) && resource != null;
    }

    /**
     * @description Manages player-specific data within a game.
     * @path /games/{gameId}/players/{userId}
     * @allow (get, list) if isSignedIn() && get(/databases/$(database)/documents/games/$(gameId)).data.players.hasAny([request.auth.uid]);
     * @allow (create) if isSignedIn() && request.auth.uid == userId
     * @allow (update, delete) if isSignedIn() && request.auth.uid == userId && resource != null;
     * @deny (create) if !isSignedIn()
     * @deny (update, delete) if !isSignedIn()
     * @principle Ensures that only players in the game can access player-specific data, and users can only create/update their own player data.
     */
    match /games/{gameId}/players/{userId} {
      allow get, list: if isSignedIn() && get(/databases/$(database)/documents/games/$(gameId)).data.players.hasAny([request.auth.uid]);
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update, delete: if isSignedIn() && request.auth.uid == userId && resource != null;
    }

    /**
     * @description Stores game logs with public read access for authenticated users and restricted write access.
     * @path /events/{eventId}
     * @allow get, list: if isSignedIn();
     * @allow create, update, delete: if false;
     * @principle Allows any signed-in user to read events, but restricts write access.
     */
    match /events/{eventId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if false;
    }
  }

  function isSignedIn() {
    return request.auth != null;
  }
}