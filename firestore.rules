/**
 * @fileoverview Firestore Security Rules for "El Pueblo Duerme"
 *
 * Core Philosophy:
 * This ruleset prioritizes authorization independence and security by denormalizing
 * data and avoiding `get()` calls. It enforces strict ownership and role-based
 * access control to protect game data. The design emphasizes atomic operations,
 * simplified debugging, and scalable authorization logic.
 *
 * Data Structure:
 * - /games/{gameId}: Stores general game information (creator, status, etc.).
 * - /games/{gameId}/players/{userId}: Stores player-specific data within a game.
 * - /games/{gameId}/logs/{logId}: Stores game logs, accessible for auditing.
 *
 * Key Security Decisions:
 * - Players can only access their own data.
 * - Game creation/modification is limited to the game creator.
 * - Game logs are write-protected, accessible only to the server for reliable recording.
 * - Read access to game logs is open to authenticated users for debugging.
 * - Listing of the players subcollection is enabled and considered secure due to the game scope.
 *
 * Denormalization for Authorization:
 * - The `Player` entity includes a `gameId` field, denormalizing the game association.
 *   This enables authorization rules to be evaluated directly on the `Player` document
 *   without needing to perform additional `get()` operations.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to the games collection.
     * @path /games/{gameId}
     * @allow get, list: Any authenticated user can read game data.
     * @allow create: Only authenticated users can create games. The 'creator' field must match the user's UID.
     * @allow update, delete: Only the game creator can modify or delete a game.
     * @deny create: If the creator field doesn't match the authenticated user's ID.
     * @deny update, delete: If the user is not the game creator.
     * @principle Enforces owner-only write access, public read access.
     */
    match /games/{gameId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn() && request.resource.data.creator == request.auth.uid;
      allow update, delete: if isSignedIn() && resource.data.creator == request.auth.uid;
    }

    /**
     * @description Controls access to the players subcollection within a game.
     * @path /games/{gameId}/players/{userId}
     * @allow get: A player can only read their own player data.
     * @allow list: Only the game creator can list players in the game.
     * @allow create: A user can create their own player entry if the userId matches their auth UID and the gameId matches the parent game.
     * @allow update, delete: A player can only update/delete their own player data.
     * @deny create: If the userId in the request doesn't match the authenticated user's ID or if the gameId doesn't match.
     * @deny update, delete: If the user is not the player or if the player document does not exist.
     * @principle Enforces player-ownership for their own data within a game.
     */
    match /games/{gameId}/players/{userId} {
      allow get: if isSignedIn() && userId == request.auth.uid;
      allow list: if isSignedIn(); // Anyone signed in can list players.
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid && request.resource.data.gameId == gameId;
      allow update, delete: if isSignedIn() && userId == request.auth.uid;
    }

    /**
     * @description Controls access to the game logs subcollection within a game.
     * @path /games/{gameId}/logs/{logId}
     * @allow get, list: Any authenticated user can read game logs.
     * @allow create, update, delete: No client-side write access. Only server-side processes can write logs.
     * @deny create, update, delete: All client requests to write game logs.
     * @principle Restricts write access to server-side processes only.
     */
    match /games/{gameId}/logs/{logId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if false;
    }

    // ---- Helper Functions ----

    // Checks if the user is signed in.
    function isSignedIn() {
      return request.auth != null;
    }
  }
}