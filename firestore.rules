/**
 * @fileoverview Firestore Security Rules for El Pueblo Duerme.
 *
 * Core Philosophy:
 * This ruleset prioritizes secure data access based on user authentication and
 * explicit ownership. It leverages denormalization and path-based authorization
 * to simplify and optimize rule evaluation. Strict validation of request data is not performed.
 *
 * Data Structure:
 * - /games/{gameId}: Stores game metadata. Games are publicly readable, but
 *   creation, updates, and deletion are restricted to the game creator.
 * - /games/{gameId}/players/{userId}: Stores player-specific data within a game.
 *   Access is restricted to the specific user (player) and the game creator.
 * - /events/{eventId}: Stores game event logs. Read access is public to authenticated users,
 *   while write access is denied to all clients.
 *
 * Key Security Decisions:
 * - User listing is disallowed.
 * - All write operations require authentication.
 * - Role-based access control is not implemented at this stage (prototyping).
 * - The 'events' collection is write-protected to prevent client-side modification of logs.
 *
 * Denormalization for Authorization:
 * - Player documents under `/games/{gameId}/players/{userId}` do not need a separate `gameId` field
 *   as authorization can be derived from the path. The `userId` is also present in the path,
 *   enabling secure, path-based authorization.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secure access to game data. Games are publicly readable, but only the creator can modify them.
     * @path /games/{gameId}
     * @allow (get, list): Any user can read game data.
     * @allow (create): The user who creates the game must be authenticated and the creator field must match the user's ID.
     * @allow (update, delete): Only the game creator can modify or delete the game.
     * @deny (create): If the 'creator' field in the request does not match the authenticated user's ID.
     * @deny (update, delete): If the request is made by a user other than the game creator or the game does not exist.
     * @principle Public read, owner-only writes, enforces document ownership for writes.
     */
    match /games/{gameId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.creator == request.auth.uid;
      allow update, delete: if isSignedIn() && isExistingOwner(resource.data.creator);
    }

    /**
     * @description Secure access to player data within a game. Only the player and the game creator can access player-specific data.
     * @path /games/{gameId}/players/{userId}
     * @allow (get): Only the player themselves can retrieve their player data.
     * @allow (list): Only the player themselves can list their player data.
     * @allow (create): A player can create their own player document if they are authenticated.
     * @allow (update, delete): Only the player themselves can update or delete their player data.
     * @deny (get, list, create, update, delete): If the request is made by a user other than the player themselves.
     * @principle Enforces document ownership for all operations.
     */
    match /games/{gameId}/players/{userId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update, delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Secure access to game event logs. Read access is public to all authenticated users, but write access is denied to all clients.
     * @path /events/{eventId}
     * @allow (get, list): Any authenticated user can read game event logs.
     * @deny (create, update, delete): No client-side write access to game event logs.
     * @principle Prevents client-side modification of logs, enforces read-only access for authenticated users.
     */
    match /events/{eventId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if false;
    }

    // ---- Helper functions ----
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }
  }
}