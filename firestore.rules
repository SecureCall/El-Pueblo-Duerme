/**
 * @fileoverview Firestore Security Rules for "El Pueblo Duerme" Prototyping Mode
 *
 * Core Philosophy:
 * This ruleset prioritizes a secure authorization model while maintaining flexibility in data shapes for rapid iteration.
 * It enforces strict user ownership and role-based access where applicable, but avoids overly strict schema validation.
 *
 * Data Structure:
 * - /games/{gameId}: Stores game instances, accessible to authenticated users, owner-write.
 * - /games/{gameId}/players/{userId}: Stores player data, owner-write.
 * - /events/{eventId}: Public read, restricted write.
 *
 * Key Security Decisions:
 * - Listing all users is disallowed.
 * - Data consistency between document IDs and internal fields is enforced for user-specific data.
 * - All write operations require user authentication.
 * - Public read is allowed for /events/{eventId} as per the data model.
 *
 * Denormalization for Authorization:
 * - The player documents include a 'gameId' field, enabling independent security rules without requiring database lookups to the parent 'game' document.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secure games collection, allowing authenticated users to create and manage their own games.
     * @path /games/{gameId}
     * @allow (create) User with UID 'user_abc' can create a new game with creator: 'user_abc'.
     * @deny (create) User with UID 'user_xyz' cannot create a game with creator: 'user_abc'.
     * @allow (get, list) Any authenticated user can view game details and list games.
     * @allow (update, delete) User with UID 'user_abc' can update/delete a game they created (creator: 'user_abc').
     * @deny (update, delete) User with UID 'user_xyz' cannot update/delete a game created by 'user_abc'.
     * @principle Enforces document ownership for writes, allows public read access.
     */
    match /games/{gameId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn() && request.resource.data.creator == request.auth.uid;
      allow update, delete: if isSignedIn() && isExistingOwner(resource.data.creator);
    }

    /**
     * @description Secure players subcollection, restricting access to players within a specific game.
     * @path /games/{gameId}/players/{userId}
     * @allow (create) User with UID 'user_abc' can create their player document in game 'game_123'.
     * @deny (create) User with UID 'user_xyz' cannot create a player document for user 'user_abc'.
     * @allow (get, list) User with UID 'user_abc' can get/list their own player document.
     * @allow (update, delete) User with UID 'user_abc' can update/delete their own player document in game 'game_123'.
     * @deny (update, delete) User with UID 'user_xyz' cannot update/delete player 'user_abc' document.
     * @principle Enforces document ownership within the 'games' subcollection.
     */
    match /games/{gameId}/players/{userId} {
      allow get, list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update, delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Secure events collection, allowing public read access and restricting write access.
     * @path /events/{eventId}
     * @allow (get, list) Any user, authenticated or not, can read game events.
     * @deny (create, update, delete) No user can create, update, or delete game events through client.
     * @principle Allows public read access with restricted writes.
     */
    match /events/{eventId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }
  }

  // --- Helper Functions ---

  /**
   * @description Checks if the request is authenticated.
   * @return {boolean} True if the user is signed in, false otherwise.
   */
  function isSignedIn() {
    return request.auth != null;
  }

  /**
   * @description Checks if the authenticated user is the owner of the resource.
   * @param {string} userId The user ID to compare against the authenticated user's ID.
   * @return {boolean} True if the user is the owner, false otherwise.
   */
  function isOwner(userId) {
    return request.auth.uid == userId;
  }

    /**
   * @description Checks if the authenticated user is the owner of an EXISTING resource.
   * @param {string} userId The user ID to compare against the authenticated user's ID.
   * @return {boolean} True if the user is the owner and the resource exists, false otherwise.
   */
  function isExistingOwner(userId) {
    return isOwner(userId) && resource != null;
  }
}