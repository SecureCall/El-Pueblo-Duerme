rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper function to check if a player is in the game.
    function isPlayer(gameData, uid) {
      return uid in gameData.players.map(p => p.userId).toSet();
    }
    
    // Helper function to get a player's data from the game document
    function getPlayer(gameData, uid) {
      return gameData.players.filter(p => p.userId == uid)[0];
    }
    
    // Helper function to get a player's data from the incoming request
    function getRequestPlayer(requestData, uid) {
      return requestData.players.filter(p => p.userId == uid)[0];
    }

    match /games/{gameId} {
      // Allow anyone to read the game state. Sensitive data should be handled by client-side logic.
      allow read: if true;

      // Allow any authenticated user to create a new game document.
      allow create: if request.auth != null;
      
      // Allow players to update the game state under specific conditions.
      allow update: if 
          // Rule 1: Allow any existing player in the game to make valid updates.
          isPlayer(resource.data, request.auth.uid) &&
          
          // Rule 1a: Players can only update their own vote, and only during the day phase.
          (request.resource.data.phase == 'day' && resource.data.phase == 'day' && 
           getPlayer(request.resource.data, request.auth.uid).votedFor != getPlayer(resource.data, request.auth.uid).votedFor) ||
           
          // Rule 1b: Players can only mark their own night ability as used, and only during the night phase.
          (request.resource.data.phase == 'night' && resource.data.phase == 'night' &&
           getPlayer(request.resource.data, request.auth.uid).usedNightAbility == true && getPlayer(resource.data, request.auth.uid).usedNightAbility == false) ||
           
          // Rule 1c: Allow the creator to manage the game (start, reset).
          (request.auth.uid == resource.data.creator && (
              // Starting the game
              (request.resource.data.status == 'in_progress' && resource.data.status == 'waiting') ||
              // Resetting the game
              (request.resource.data.status == 'waiting' && resource.data.status == 'finished')
           )) ||
           
          // Rule 2: Allow a new player to join a 'waiting' game.
          // This checks if the user's UID is being added to the players array and the game is in 'waiting' status.
          (resource.data.status == 'waiting' && 
           !isPlayer(resource.data, request.auth.uid) && 
           isPlayer(request.resource.data, request.auth.uid));

      // Disallow deletion of games for data integrity. Can be changed later.
      allow delete: if false;
    }
  }
}
