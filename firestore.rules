/**
 * @fileoverview Firestore Security Rules for "El Pueblo Duerme" (The Village Sleeps).
 *
 * Core Philosophy:
 * This ruleset prioritizes a secure, owner-centric model where data access is generally restricted to the authenticated user.
 * Certain data collections like game events are publicly readable but write-protected.
 *
 * Data Structure:
 * - /games/{gameId}: Stores game instances.  The `creator` field determines ownership.
 * - /games/{gameId}/players/{userId}: Stores player data within a game.  The `userId` path segment and the document's `userId` field must match `request.auth.uid`.
 * - /events/{eventId}: Stores game events.  These are publicly readable and writeable only by backend.
 *
 * Key Security Decisions:
 * - Users can only create, update, or delete their own player documents within a game.
 * - Game events are write-protected to prevent client-side tampering.
 *
 * Denormalization for Authorization:
 * - The `Player` document includes a `userId` and `gameId` field, mirroring the path. This avoids extra `get()` calls to validate ownership.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to Game documents.
     * @path /games/{gameId}
     */
    match /games/{gameId} {
        allow get, list: if true;
        allow create: if isSignedIn() && request.resource.data.creator == request.auth.uid;
        allow update: if isSignedIn() && resource.data.creator == request.auth.uid;
        allow delete: if isSignedIn() && resource.data.creator == request.auth.uid;
    }

    /**
     * @description Controls access to Player documents within a Game.
     * @path /games/{gameId}/players/{userId}
     */
    match /games/{gameId}/players/{userId} {
        allow get, list: if true;
        allow create: if isSignedIn() && request.auth.uid == request.resource.data.userId && request.resource.data.gameId == gameId;
        allow update: if isSignedIn() && request.auth.uid == userId;
        allow delete: if isSignedIn() && request.auth.uid == userId;
    }

   /**
    * @description Controls access to GameEvent documents.
    * @path /events/{eventId}
    */
    match /events/{eventId} {
        allow get, list: if true;
        allow create: if false;
        allow update: if false;
        allow delete: if false;
    }

    // --- Helper functions ---

    /**
     * @description Checks if the user is signed in.
     * @return {bool} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }
  }
}