/**
 * @file Firestore Security Rules for "El Pueblo Duerme"
 *
 * @corePhilosophy
 * This ruleset prioritizes security and authorization independence using data denormalization.
 * It implements a role-based access control model, with a focus on user ownership and controlled
 * access to game data.  It avoids `get()` calls in rules for simpler, more performant security checks.
 *
 * @dataStructure
 * - `/games/{gameId}`: Stores game instances, accessible for read by any authenticated user, but write-protected to the game creator.
 * - `/games/{gameId}/players/{userId}`: Stores player-specific data, accessible only to the respective user within the game.
 * - `/games/{gameId}/logs/{logId}`: Stores game logs, readable by any authenticated user, but writable only by the server.
 *
 * @keySecurityDecisions
 * - User listing is generally disallowed to protect privacy.
 * - Data validation is relaxed in favor of rapid iteration, with a focus on authorization-critical fields.
 * - Ownership is strictly enforced for game creation and modification.
 * - Server-only write access is enforced for game logs to maintain data integrity.
 * - Authorization Independence is achieved by denormalizing the `gameId` field in the `/games/{gameId}/players/{userId}` documents.
 *
 * @denormalizationForAuthorization
 * The `gameId` field is denormalized into the `/games/{gameId}/players/{userId}` documents.
 * This allows rules on player documents to be validated without additional `get()` calls to the parent `/games/{gameId}` document.
 *
 * @structuralSegregation
 * N/A
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to game documents.
     * @path /games/{gameId}
     * @allow (get, list): Any authenticated user can read game data.
     * @allow (create): Authenticated user can create a game. The 'creator' field must match the user's UID.
     * @allow (update, delete): Only the game creator can update or delete a game.
     * @deny (create): If the creator field doesn't match the user's UID.
     * @deny (update, delete): If the user is not the creator of the game.
     * @principle Enforces ownership for game creation and modification. Public read access.
     */
    match /games/{gameId} {
      // Anyone can read games
      allow get, list: if isSignedIn();

      // Only the creator can create, update, and delete games
      allow create: if isSignedIn() && request.resource.data.creator == request.auth.uid;
      allow update, delete: if isSignedIn() && resource.data.creator == request.auth.uid;
    }

    /**
     * @description Controls access to player documents within a game.
     * @path /games/{gameId}/players/{userId}
     * @allow (get): A player can read their own data.
     * @allow (list): The owner can list their own documents.
     * @allow (create): A user can create their own player document within a game, provided the userId matches the auth UID and gameId matches the parent.
     * @allow (update, delete): A player can update or delete their own data, provided the document exists.
     * @deny (create): If the userId doesn't match the auth UID or if the gameId doesn't match the parent game.
     * @deny (update, delete): If the user is not the owner of the player document or the document doesn't exist.
     * @principle Enforces ownership for player data.
     */
    match /games/{gameId}/players/{userId} {
      // Only the player can read and write their own data
      allow get: if isSignedIn() && request.auth.uid == userId;
      allow list: if false;
      allow create: if isSignedIn() && request.auth.uid == userId && request.resource.data.gameId == gameId;
      allow update, delete: if isSignedIn() && request.auth.uid == userId && existsAfter(/databases/$(database)/documents/games/$(gameId)/players/$(userId));
    }

    /**
     * @description Controls access to game log documents.
     * @path /games/{gameId}/logs/{logId}
     * @allow (get, list): Any authenticated user can read game logs for debugging purposes.
     * @allow (create, update, delete): Only the server can write game logs.
     * @deny (create, update, delete): If the request is not from the server.
     * @principle Restricts write access to game logs to the server for data integrity.
     */
    match /games/{gameId}/logs/{logId} {
      // Anyone can read logs
      allow get, list: if isSignedIn();

      // Only the server can create, update, and delete logs
      allow create, update, delete: if false; // TODO: Implement server-only write access with a custom claim
    }

    // --- Helper Functions ---
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
      return isSignedIn() && isOwner(userId) && resource != null;
    }
  }
}