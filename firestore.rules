/**
 * @fileoverview Firestore Security Rules for El Pueblo Duerme.
 *
 * Core Philosophy:
 * This ruleset prioritizes secure data access based on user authentication and
 * explicit authorization. It enforces ownership and role-based access control
 * where appropriate, defaulting to a deny-all policy for ambiguous scenarios.
 *
 * Data Structure:
 * - /games/{gameId}: Stores game instances.
 * - /games/{gameId}/players/{userId}: Stores player data for each game.
 * - /events/{eventId}: Stores game events.
 *
 * Key Security Decisions:
 * - Listing of games is public.
 * - Player data is accessible only to the specific user who owns that data within a game.
 * - Game creation is open to any authenticated user, but they become the owner.
 *
 * Denormalization for Authorization:
 * The `Player` entity denormalizes the `gameId` to enable direct authorization
 * checks within the `/games/{gameId}/players/{userId}` path.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows anyone to read game details, but restricts creation, updates, and deletion to authenticated users.
     * @path /games/{gameId}
     * @allow (get, list): Any user can read game details.
     * @allow (create): Authenticated user can create a game. The 'creator' field must match their UID.
     * @deny (update, delete): Only the game creator can update or delete the game.
     * @principle Public read, owner-only writes.
     */
    match /games/{gameId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.creator == request.auth.uid;
      allow update, delete: if isSignedIn() && isExistingOwner(resource.data.creator);
    }

    /**
     * @description Allows only the specific user to read and write their own player data within a game.
     * @path /games/{gameId}/players/{userId}
     * @allow (get, create, update, delete, list): User can only access their own player data.
     * @deny: Access denied if the userId in the path does not match the authenticated user's UID.
     * @principle Enforces strict user-ownership within a game.
     */
    match /games/{gameId}/players/{userId} {
      allow get, create, update, delete, list: if isSignedIn() && isOwner(userId);
    }

      /**
       * @description Allows any authenticated user to list events.
       * @path /games/{gameId}/events
       * @allow (list): Any authenticated user can list events.
       * @deny (get, create, update, delete): No one can perform get, create, update, or delete operations.
       * @principle Public read-only access for authenticated users.
       */
      match /games/{gameId}/events/{eventId} {
          allow list: if isSignedIn();
          allow get, create, update, delete: if false;
      }

    /**
     * @description Prevents all access to this path. Events should be accessed via /games/{gameId}/events/{eventId}.
     * @path /events/{eventId}
     * @deny (get, list, create, update, delete): No one can access events directly.
     * @principle: All access is denied.
     */
    match /events/{eventId} {
      allow get, list, create, update, delete: if false;
    }

    // --- Helper Functions ---

    /**
     * @description Checks if the user is signed in.
     * @return {bool} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user is the owner of the resource.
     * @param {string} userId The user ID to compare against the authenticated user's UID.
     * @return {bool} True if the user is the owner, false otherwise.
     * @example isOwner('someUserId')
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is the owner of an existing resource.
     * @param {string} userId The user ID to compare against the authenticated user's UID.
     * @return {bool} True if the user is the owner and the resource exists, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }
  }
}