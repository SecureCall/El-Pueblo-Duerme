/**
 * @fileoverview Firestore Security Rules for El Pueblo Duerme.
 *
 * Core Philosophy:
 * This ruleset prioritizes secure data access based on user authentication and
 * explicit authorization. It defaults to strict access control, requiring
 * users to be authenticated and authorized to perform specific actions on
 * specific documents. Data validation is relaxed for rapid prototyping but
 * critical authorization fields are validated.
 *
 * Data Structure:
 * - /games/{gameId}: Stores game instances, with 'creator' field indicating the owner.
 * - /games/{gameId}/players/{userId}: Stores player data within a game.
 * - /events/{eventId}: Stores game events.  Read access is public for authenticated users, write access restricted to server.
 *
 * Key Security Decisions:
 * - Authenticated access is enforced using `isSignedIn()`.
 * - User listing is not allowed unless explicitly specified.
 * - Data validation is relaxed to allow for rapid prototyping, focusing on
 *   authorization fields.
 *
 * Denormalization for Authorization:
 * - The 'Player' entity denormalizes the 'gameId' to enable independent
 *   authorization for player-related operations, avoiding costly `get()` calls.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows access to a specific game document.
     * @path /games/{gameId}
     * @allow (get) Authenticated user can read any game.
     * @allow (create) Authenticated user can create a game if they are the creator.
     * @allow (update) Authenticated user can update a game if they are the creator.
     * @allow (delete) Authenticated user can delete a game if they are the creator and it exists.
     * @deny (create) Non-authenticated user cannot create a game.
     * @deny (update) Non-authenticated user cannot update a game.
     * @deny (delete) Non-authenticated user cannot delete a game.
     * @deny (create) Authenticated user cannot create a game if the creator field does not match their UID.
     * @deny (update) Authenticated user cannot update a game if they are not the creator.
     * @deny (delete) Authenticated user cannot delete a game if they are not the creator.
     * @principle Enforces document ownership for writes; public read access.
     */
    match /games/{gameId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn() && request.resource.data.creator == request.auth.uid;
      allow update: if isSignedIn() && request.auth.uid == resource.data.creator;
      allow delete: if isSignedIn() && request.auth.uid == resource.data.creator;
    }

    /**
     * @description Allows access to a specific player document within a game.
     * @path /games/{gameId}/players/{userId}
     * @allow (get) Authenticated user can read a player if they are the player or the game creator.
     * @allow (create) Authenticated user can create a player if they are the player.
     * @allow (update) Authenticated user can update a player if they are the player.
     * @allow (delete) Authenticated user can delete a player if they are the player and it exists.
     * @deny (create) Non-authenticated user cannot create a player.
     * @deny (update) Non-authenticated user cannot update a player.
     * @deny (delete) Non-authenticated user cannot delete a player.
     * @deny (create) Authenticated user cannot create a player if the userId field does not match their UID.
     * @deny (update) Authenticated user cannot update a player if they are not the player.
     * @deny (delete) Authenticated user cannot delete a player if they are not the player.
     * @principle Enforces document ownership for writes.
     */
    match /games/{gameId}/players/{userId} {
      allow get: if isSignedIn() && (userId == request.auth.uid || isGameCreator(gameId));
      allow list: if isSignedIn() && isGameCreator(gameId);
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update: if isSignedIn() && request.auth.uid == userId;
      allow delete: if isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Allows read access to game events for authenticated users.  Write access is denied.
     * @path /games/{gameId}/events/{eventId}
     * @allow (get) Authenticated user can read any event.
     * @allow (list) Authenticated user can list events.
     * @deny (create) No one can create an event via client code.
     * @deny (update) No one can update an event via client code.
     * @deny (delete) No one can delete an event via client code.
     * @principle Public read access with restricted writes.
     */
    match /games/{gameId}/events/{eventId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows read access to game events for authenticated users.  Write access is denied.
     * @path /events/{eventId}
     * @allow (get) Authenticated user can read any event.
     * @allow (list) Authenticated user can list events.
     * @deny (create) No one can create an event via client code.
     * @deny (update) No one can update an event via client code.
     * @deny (delete) No one can delete an event via client code.
     * @principle Public read access with restricted writes.
     */
    match /events/{eventId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }
  }

  // Helper functions
  function isSignedIn() {
    return request.auth != null;
  }

  function isOwner(userId) {
    return request.auth.uid == userId;
  }

  function isGameCreator(gameId) {
    return get(/databases/$(database)/documents/games/$(gameId)).data.creator == request.auth.uid;
  }
}