/**
 * @fileoverview Firestore Security Rules for El Pueblo Duerme.
 *
 * Core Philosophy:
 * This ruleset prioritizes secure data access based on user authentication and
 * explicit ownership or membership. It minimizes reliance on complex queries
 * within rules, opting for data denormalization to simplify authorization logic and improve performance.
 *
 * Data Structure:
 * - /games/{gameId}: Stores game instances.
 * - /games/{gameId}/players/{userId}: Stores player data associated with a specific game.
 * - /events/{eventId}: Stores game event logs.
 *
 * Key Security Decisions:
 * - Games and Players: Access is restricted to authenticated users. Players can only read and write their own player document.
 * - Game Events: Read access to game events is open to any logged in user, however write access is not permitted.
 *
 * Denormalization for Authorization:
 * - The Player document contains the gameId and userId.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Secures the 'games' collection. Only authenticated users can create games.
     * @path /games/{gameId}
     * @allow (create) User 'user_abc' can create a game with creator field set to 'user_abc'.
     * @deny (create) User 'user_xyz' cannot create a game with creator field set to 'user_abc'.
     * @principle Enforces that only the authenticated user can create a game and that the creator field must match the authenticated user's ID.
     */
    match /games/{gameId} {
      allow get, list: if false;
      allow create: if isSignedIn() && request.resource.data.creator == request.auth.uid;
      allow update, delete: if false;
    }

    /**
     * @description Secures the 'players' subcollection within a specific game.
     * @path /games/{gameId}/players/{userId}
     * @allow (get, list) Any authenticated user can list other players.
     * @allow (create) User 'user_abc' can create their player document under /games/{gameId}/players/{user_abc}.
     * @deny (create) User 'user_xyz' cannot create a player document under /games/{gameId}/players/{user_abc}.
     * @principle Enforces that a user can only create their own player document.
     */
    match /games/{gameId}/players/{userId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == request.auth.uid;
      allow update, delete: if false;
    }

    /**
     * @description Secures the 'events' collection, allowing read access to authenticated users.
     * @path /events/{eventId}
     * @allow (get, list) Any authenticated user can get and list events.
     * @deny (create, update, delete) No one can create, update or delete events.
     * @principle Restricts write access to the 'events' collection while allowing read access to any authenticated user.
     */
    match /events/{eventId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if false;
    }
  }
}