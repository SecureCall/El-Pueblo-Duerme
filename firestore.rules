/**
 * @fileoverview Firestore Security Rules for 'El Pueblo Duerme'.
 *
 * Core Philosophy:
 * This ruleset prioritizes authorization and access control, focusing on who can
 * read and write data. Data validation is relaxed to allow for rapid prototyping.
 *
 * Data Structure:
 * - /games/{gameId}: Stores game instances. Game creator has write access.
 * - /games/{gameId}/players/{userId}: Stores player data within a specific game.
 *   Only the user (player) can read or write their own player document.
 * - /events/{eventId}: Stores game events.  Write access is restricted. Any authenticated user can read.
 *
 * Key Security Decisions:
 * - Users can only read/write their own player documents.
 * - Game events are readable by all authenticated users, but write access is restricted.
 *
 * Denormalization for Authorization:
 * - The `players` subcollection uses the userId as the document ID, allowing simpler rules.
 *
 * Structural Segregation:
 * - No separation of public/private data is needed in this version.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to game instances.
     * @path /games/{gameId}
     * @allow (get, list): Any authenticated user can read the game data.
     * @allow (create): Only the user whose ID matches the `creator` field can create a game.
     * @allow (update, delete): Only the creator of the game can update or delete it.
     * @deny (create): If the `creator` field does not match the authenticated user's ID.
     * @deny (update, delete): If the authenticated user is not the creator of the game.
     * @principle Enforces document ownership for writes.
     */
    match /games/{gameId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.creator == request.auth.uid;
      allow update, delete: if isSignedIn() && get(/databases/$(database)/documents/games/$(gameId)).data.creator == request.auth.uid;
    }

    /**
     * @description Controls access to player data within a specific game.
     * @path /games/{gameId}/players/{userId}
     * @allow (get, list): Only the user whose ID matches the `userId` parameter can read their player data.
     * @allow (create, update, delete): Only the user whose ID matches the `userId` parameter can create, update, or delete their player data.
     * @deny (get, list, create, update, delete): If the authenticated user's ID does not match the `userId` parameter.
     * @principle Restricts access to a user's own data tree.
     */
    match /games/{gameId}/players/{userId} {
      allow get, list, create, update, delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Controls access to game event logs.
     * @path /events/{eventId}
     * @allow (get, list): Any authenticated user can read game event logs.
     * @deny (create, update, delete): No user can create, update, or delete game event logs through the client.
     * @principle Restricts write access to game event logs.
     */
    match /events/{eventId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if false;
    }

    // ----- HELPER FUNCTIONS -----

    /**
     * @description Checks if the user is signed in.
     * @return {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user ID matches the authenticated user's ID.
     * @param {string} userId The user ID to check.
     * @return {boolean} True if the user ID matches the authenticated user's ID, false otherwise.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is the creator of the specified game and if the game exists.
     * @param {string} gameId The ID of the game.
     * @param {string} userId The ID of the authenticated user.
     * @return {boolean} True if the user is the creator and the game exists, false otherwise.
     */
    // Removed unused function to resolve linting errors.
    }
  }