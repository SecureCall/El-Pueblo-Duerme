/**
 * @fileoverview Firestore Security Rules for "El Pueblo Duerme" application.
 *
 * Core Philosophy:
 * This ruleset prioritizes secure access to game data, enforcing ownership and
 * role-based restrictions where appropriate. It allows authenticated users to
 * read certain game information while restricting modification to authorized users only.
 *
 * Data Structure:
 * - /games/{gameId}: Stores game metadata, with the 'creator' field denoting ownership.
 * - /games/{gameId}/players/{userId}: Stores player-specific data within a game.
 * - /events/{eventId}: Stores immutable game logs; readable by authenticated users.
 *
 * Key Security Decisions:
 * - Players can read other players data in a game.
 * - Only authenticated users can create, update or delete games and players.
 * - Game events are readable by authenticated users but can not be modified by them.
 *
 * Denormalization for Authorization:
 * - Player documents are stored under the /games/{gameId}/players/{userId} path. The player document contains the userId that is the source of truth for authorization.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secures the /games/{gameId} collection, allowing creation by authenticated users.
     *              Subsequent updates and deletes are restricted to the game creator.
     * @path /games/{gameId}
     * @allow (create) Signed-in user creates a new game.
     *              Example: User 'user123' creates a game with creator: 'user123'.
     * @allow (get, list) all authenticated users.
     * @deny (update, delete) Non-creator attempts to modify the game.
     *              Example: User 'user456' tries to update a game created by 'user123'.
     * @principle Enforces game ownership for modification.
     */
    match /games/{gameId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn() && request.resource.data.creator == request.auth.uid;
      allow update, delete: if isSignedIn() && isExistingOwner(resource.data.creator);
    }

    /**
     * @description Secures the /games/{gameId}/players/{userId} subcollection,
     *              allowing creation by authenticated users and restricting updates/deletes
     *              to the player themselves.
     * @path /games/{gameId}/players/{userId}
     * @allow (create) Signed-in user creates a player entry for themselves within a game.
     *              Example: User 'user123' creates a player document under /games/game1/players/user123.
     * @allow (get, list) Signed-in user gets player data of a game
     *              Example: User 'user123' gets a player document under /games/game1/players/user456
     * @deny (update, delete) Non-owner attempts to modify player data.
     *              Example: User 'user456' tries to update the player document of 'user123' under /games/game1/players/user123.
     * @principle Enforces player ownership for modification.
     */
    match /games/{gameId}/players/{userId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update, delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Secures the /events/{eventId} collection, allowing read access to authenticated users
     *              but disallowing any modifications.
     * @path /events/{eventId}
     * @allow (get, list) Signed-in user reads a game event.
     *              Example: User 'user123' retrieves a game event.
     * @deny (create, update, delete) Any user attempts to create, update, or delete a game event.
     *              Example: User 'user123' tries to create a new game event.
     * @principle Restricts write access to game events, allowing only read access for authenticated users.
     */
    match /events/{eventId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if false;
    }

    // --- Helper Functions ---

    /**
     * @description Checks if the user is signed in.
     * @return {boolean} True if the user is authenticated, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user is the owner of the resource.
     * @param {string} userId - The user ID to compare with the request's authentication UID.
     * @return {boolean} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
        return request.auth.uid == userId;
    }

    /**
     * @description Checks if the user is the owner of the resource and the resource exists.
     * @param {string} userId - The user ID to compare with the resource's owner ID.
     * @return {boolean} True if the user is the owner and the resource exists, false otherwise.
     */
    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }
  }
}