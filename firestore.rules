/**
 * @fileoverview Firestore Security Rules for "El Pueblo Duerme" (Prototyping Mode).
 *
 * Core Philosophy: This ruleset prioritizes strict authorization based on ownership and explicit relationships while being flexible on data shapes to allow for rapid iteration.
 *
 * Data Structure:
 * - /games/{gameId}: Stores game instances.
 * - /games/{gameId}/players/{userId}: Stores player data within each game.
 * - /games/{gameId}/logs/{logId}: Stores game logs.
 *
 * Key Security Decisions:
 * - Games: Any authenticated user can read all games. Creation/modification is limited to the game creator.
 * - Players: Players can only access their own data within a given game.
 * - Game Logs: Write access is restricted to the server; any authenticated user can read the logs.
 * - Authorization Independence:  The rules avoid using `get()` calls by denormalizing the `gameId` into the Player documents.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Manages access to game instances.
     * @path /games/{gameId}
     * @allow get, list: Any authenticated user can read game data.
     * @allow create: Authenticated user can create a game, and the creator field must match their UID.
     * @allow update, delete: Only the game creator can modify or delete the game.
     * @deny create: If the creator field does not match the authenticated user's UID.
     * @deny update: If the document does not exist.
     * @deny delete: If the document does not exist.
     * @principle Enforces owner-only writes and public reads.
     */
    match /games/{gameId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.creator == request.auth.uid;
      allow update, delete: if isExistingOwner(resource.data.creator);
    }

    /**
     * @description Manages access to player data within a specific game.
     * @path /games/{gameId}/players/{userId}
     * @allow get: A player can read their own data.
     * @allow list: The game creator can list all players, or a player can list only their own data.
     * @allow create: A player can create their own player document if the userId and gameId matches the document id.
     * @allow update, delete: A player can update or delete their own player document.
     * @deny create: If the userId does not match the authenticated user's UID.
     * @deny update: If the document does not exist.
     * @deny delete: If the document does not exist.
     * @principle Enforces player-ownership within the game context and validates relational integrity.
     */
    match /games/{gameId}/players/{userId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isSignedIn() && request.resource.data.userId == userId && request.resource.data.gameId == gameId;
      allow update, delete: if isExistingOwner(userId);
    }

    /**
     * @description Manages access to game logs.
     * @path /games/{gameId}/logs/{logId}
     * @allow get, list: Any authenticated user can read game logs.
     * @allow create, update, delete: Denied to all clients.  Write access is intended for server-side code only.
     * @principle Restricts write access to server-side code for reliable logging.
     */
    match /games/{gameId}/logs/{logId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if false;
    }

    // --- Helper functions ---

    /**
     * @description Checks if the user is signed in.
     * @return {bool} True if the user is signed in; otherwise, false.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user is the owner of the resource.
     * @param {string} userId - The ID of the supposed owner.
     * @return {bool} True if the user is signed in and their UID matches the provided userId; otherwise, false.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is the existing owner of the resource.
     *              This also verifies that the document exists before allowing changes.
     * @param {string} userId - The ID of the supposed owner.
     * @return {bool} True if the user is signed in, their UID matches the provided userId, and the document exists; otherwise, false.
     */
    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }
  }
}