/**
 * @fileOverview Firestore Security Rules for "El Pueblo Duerme"
 *
 * @corePhilosophy This ruleset prioritizes secure data access based on user authentication and resource ownership.
 *   It uses denormalization and path-based authorization to simplify rule logic and improve performance.
 *   Schema validation is relaxed in this prototyping phase to allow for rapid data model iteration.
 *
 * @dataStructure
 *   - /games/{gameId}: Stores game instances, with the 'creator' field indicating the owner.
 *   - /games/{gameId}/players/{userId}: Stores player data for each game, nested under the game.
 *   - /events/{eventId}: Stores game event logs.  Write access is restricted, and read access is public for all authenticated users.
 *
 * @keySecurityDecisions
 *   - Listing of users is not permitted.
 *   - The /events collection is readable by any authenticated user, but write access is implicitly denied.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to the /games/{gameId} collection.
     * @path /games/{gameId}
     * @allow (create) - Authenticated user can create a game if the creator field matches their UID.
     * @allow (get, list) - Authenticated user can read any game.
     * @allow (update, delete) - Only the game creator can update or delete the game.
     * @deny (create) - If the creator field does not match the authenticated user's UID.
     * @deny (update, delete) - If the user is not the game creator.
     * @principle Enforces document ownership for writes, allows public reads.
     */
    match /games/{gameId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
          return isOwner(userId) && resource != null;
      }

      allow get, list: if isSignedIn();
      allow create: if isSignedIn() && request.resource.data.creator == request.auth.uid;
      allow update, delete: if isExistingOwner(resource.data.creator);
    }

    /**
     * @description Controls access to the /games/{gameId}/players/{userId} collection.
     * @path /games/{gameId}/players/{userId}
     * @allow (create) - Authenticated user can create a player document if the userId matches their UID.
     * @allow (get, list) - Authenticated user can read their own player document within a game.
     * @allow (update, delete) - Only the player (owner) can update or delete their player document.
     * @deny (create) - If the userId does not match the authenticated user's UID.
     * @deny (update, delete) - If the user is not the player (owner).
     * @principle Enforces document ownership for writes, restricts reads to owner.
     */
    match /games/{gameId}/players/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
          return isOwner(userId) && resource != null;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update, delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to the /events/{eventId} collection.
     * @path /events/{eventId}
     * @allow (get, list) - Any authenticated user can read events.
     * @deny (create, update, delete) - No user can create, update, or delete events.
     * @principle Allows public reads for authenticated users, denies all writes.
     */
    match /events/{eventId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get, list: if isSignedIn();
      allow create, update, delete: if false;
    }
  }
}