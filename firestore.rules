/**
 * @fileoverview Firestore Security Rules for El Pueblo Duerme.
 *
 * Core Philosophy:
 * This ruleset prioritizes secure authorization based on user identity and explicit ownership.
 * It uses a mixture of ownership-based and shared-access control patterns. The rules do not enforce
 * strict data validation, allowing for rapid prototyping and flexible data structures.
 *
 * Data Structure:
 * - /games/{gameId}: Stores game instances, with the 'creator' field indicating the game creator.
 * - /games/{gameId}/players/{userId}: Stores player data for each game, nested under the game.
 * - /events/{eventId}: Stores game events.
 *
 * Key Security Decisions:
 * - Users can only list players of a specific game.
 * - Users can only create games.
 * - All write operations are protected by authorization checks.
 *
 * Denormalization for Authorization:
 * The 'Player' documents under /games/{gameId}/players/{userId} denormalize the 'gameId' so that security rules
 * on the players collection can ensure integrity between the path and the document's data.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows creating and reading Games.  Only the game creator can update or delete.
     * @path /games/{gameId}
     * @allow (create) - authenticated user creates a new game with creator field set to their UID.
     * @allow (get, list) - any authenticated user can read game details.
     * @deny (update, delete) - any user attempts to update or delete a game they didn't create.
     * @principle Enforces creator-only write access with public read access for games.
     */
    match /games/{gameId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.creator == request.auth.uid;
      allow update, delete: if isSignedIn() && resource.data.creator == request.auth.uid && resource != null;
    }

    /**
     * @description Allows listing players within a specific game. Creating, updating, and deleting player documents is disallowed.
     * @path /games/{gameId}/players/{userId}
     * @allow (list) - any authenticated user can list players for a specific game.
     * @deny (create, update, delete, get) - any user attempts to create, update, delete, or get player documents.
     * @principle Access to player lists is public for authenticated users.
     */
    match /games/{gameId}/players/{userId} {
      allow list: if isSignedIn();
      allow get: if false;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows creating and reading GameEvents. Update and delete operations are forbidden.
     * @path /events/{eventId}
     * @allow (create) - any authenticated user can create a GameEvent.
     * @allow (get, list) - any authenticated user can read GameEvents.
     * @deny (update, delete) - all attempts to update or delete a GameEvent are denied.
     * @principle Restricts write access to authenticated users, but forbids updates and deletes.
     */
    match /events/{eventId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if false;
      allow delete: if false;
    }

  }

  // Helper function to determine if a user is signed in.
  function isSignedIn() {
    return request.auth != null;
  }
}