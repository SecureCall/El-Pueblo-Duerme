/**
 * @fileoverview Firestore Security Rules for "El Pueblo Duerme" Game Application.
 *
 * Core Philosophy: Authorization Independence. Rules avoid `get()` calls for
 * simpler, faster, and more reliable security checks. Data is denormalized where
 * necessary to achieve this.
 *
 * Data Structure:
 * - /games/{gameId}: Stores general game information.
 * - /games/{gameId}/players/{userId}: Stores player-specific data for each game.
 * - /games/{gameId}/logs/{logId}: Stores game logs.
 *
 * Key Security Decisions:
 * - Games are publicly readable, but only the game creator can modify them.
 * - Players can only access their own data within a game.
 * - Game logs are writeable only by the server and readable by any authenticated user.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Grants read access to all games and restricts write access to the game creator.
     * @path /games/{gameId}
     * @allow (get, list): Any authenticated user can read game data.
     * @allow (create): The user creating the game is the authenticated user.
     * @allow (update, delete): The user updating/deleting the game is the game creator, and the document exists.
     * @deny (create): The user attempts to create a game with a creator ID that doesn't match their own.
     * @deny (update, delete): The user attempts to update/delete a game they didn't create, or the document doesn't exist.
     * @principle Public Read with Owner-Only Writes.
     */
    match /games/{gameId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.creator == request.auth.uid;
      allow update, delete: if isSignedIn() && request.resource.data.creator == resource.data.creator;
    }

    /**
     * @description Grants access to player data only to the player themselves within a specific game.
     * @path /games/{gameId}/players/{userId}
     * @allow (get, list): The user reading the player data is the player themselves.
     * @allow (create, update, delete): The user creating/updating/deleting the player data is the player themselves, and the userId in the path matches the userId in the document.
     * @deny (get, list): The user attempts to read player data for another user.
     * @deny (create, update, delete): The user attempts to create/update/delete player data for another user, or the userId in the path doesn't match the userId in the document.
     * @principle Ownership.
     */
    match /games/{gameId}/players/{userId} {
      allow get, list: if isSignedIn() && request.auth.uid == userId;
      allow create: if isSignedIn() && request.auth.uid == userId && request.resource.data.userId == userId;
      allow update: if isSignedIn() && request.auth.uid == userId && request.resource.data.userId == userId;
      allow delete: if isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Restricts write access to game logs to the server and allows read access to any authenticated user.
     * @path /games/{gameId}/logs/{logId}
     * @allow (get, list): Any authenticated user can read game logs.
     * @deny (create, update, delete): All write operations are denied to client-side requests.
     * @principle Server-Only Writes, Public Reads.
     */
    match /games/{gameId}/logs/{logId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if false;
    }

    // --- Helper functions ---

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    //function isExistingOwner(documentId, userId) {
    //    return isSignedIn() && isOwner(userId) && exists(/databases/$(database)/documents/games/$(documentId));
    //}
  }
}