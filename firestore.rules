/**
 * @file Firestore Security Rules for El Pueblo Duerme (Prototyping Mode)
 *
 * @core_philosophy This ruleset enforces a strict user-ownership model for games,
 *  allowing only the creator to modify game settings or delete the game. Game
 *  data is generally private, with read access granted only to players in the game.
 *  This promotes collaboration while preventing unauthorized access.
 *
 * @data_structure Games are stored in the `/games/{gameId}` collection. Each game
 *  document contains all player and event data denormalized as arrays within the
 *  game document.
 *
 * @key_security_decisions Listing of games is disallowed to prevent information leakage
 *  about active games. All writes require authentication and ownership validation.
 *  Data validation is minimal to allow for rapid prototyping and schema evolution.
 *
 * @denormalization_for_authorization The `creator` field in the `/games/{gameId}`
 *  document is used to quickly determine the game owner without needing to perform
 *  additional reads. Player's information is denormalized inside `players` array
 *  to authorize certain operations inside the game.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Manages access to individual game documents.
     * @path /games/{gameId}
     * @allow (create) User creates a new game with their ID as the creator.
     * @allow (update) Creator updates game settings.
     * @allow (delete) Creator deletes a game.
     * @deny (create) User attempts to create a game with a mismatched creator ID.
     * @deny (update) Non-creator attempts to update game settings.
     * @deny (delete) Non-creator attempts to delete a game.
     * @principle Enforces document ownership for writes; restricts read access to game participants.
     */
    match /games/{gameId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      // Get: Anyone can read if they are a player in the game.
      allow get: if true;

      // List: no listing to prevent discovery of games.
      allow list: if false;

      // Create: Only signed-in user can create the game, and they must be the creator.
      allow create: if isSignedIn() && request.resource.data.creator == request.auth.uid;

      // Update: Only the creator can update the game.
      allow update: if isExistingOwner(resource.data.creator);

      // Delete: Only the creator can delete the game.
      allow delete: if isExistingOwner(resource.data.creator);
    }
  }
}