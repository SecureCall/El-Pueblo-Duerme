
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    function isPlayerInGame(gameId) {
      return get(/databases/$(database)/documents/games/$(gameId)).data.players.hasAny(['userId'], request.auth.uid);
    }

    function isCreator(gameId) {
      return get(/databases/$(database)/documents/games/$(gameId)).data.creator == request.auth.uid;
    }
    
    function isPlayerAlive(gameId) {
        let player = get(/databases/$(database)/documents/games/$(gameId)).data.players.get(request.auth.uid, null);
        return player != null && player.isAlive == true;
    }

    match /games/{gameId} {
      allow read: if true;
      allow create: if request.auth != null;

      allow update: if request.auth != null && isPlayerInGame(gameId);

      // --- Granular field validation for updates ---

      // Only the creator can start the game
      allow update: if isCreator(gameId) && request.resource.data.status == 'in_progress' && resource.data.status == 'waiting';

      // Only the creator can reset the game
      allow update: if isCreator(gameId) && request.resource.data.status == 'waiting' && resource.data.status == 'finished';

      // Players can join a waiting game
      allow update: if request.auth != null && resource.data.status == 'waiting' && request.resource.data.players.size() == resource.data.players.size() + 1;
      
      // Players can update their own display name or avatar in the lobby
      allow update: if request.auth != null && resource.data.status == 'waiting' 
                  && request.resource.data.players.size() == resource.data.players.size()
                  && request.resource.data.players.get(request.auth.uid, null) != null;


      // Immutable fields after game starts (cannot be changed by client)
      allow update: if resource.data.status == 'in_progress'
                  && request.resource.data.players[request.auth.uid].role == resource.data.players[request.auth.uid].role
                  && request.resource.data.players[request.auth.uid].isAlive == resource.data.players[request.auth.uid].isAlive
                  && request.resource.data.players[request.auth.uid].isLover == resource.data.players[request.auth.uid].isLover;

      // Voting logic
      allow update: if resource.data.phase == 'day' 
                    && isPlayerAlive(gameId)
                    && resource.data.players[request.auth.uid].votedFor == null
                    && request.resource.data.players[request.auth.uid].votedFor != null;

      // Night action logic
      allow update: if resource.data.phase == 'night'
                    && isPlayerAlive(gameId)
                    && resource.data.players[request.auth.uid].usedNightAbility == false
                    && request.resource.data.players[request.auth.uid].usedNightAbility == true;
      
      // Allow sending chat messages if player is in game
      allow update: if isPlayerInGame(gameId)
                    && request.resource.data.chatMessages.size() == resource.data.chatMessages.size() + 1;

    }
  }
}
