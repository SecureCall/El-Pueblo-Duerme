/**
 * @file Firebase Security Rules for "El Pueblo Duerme"
 *
 * @core_philosophy This ruleset enforces a role-based access control model for games,
 *  where game creators have administrative privileges and players have specific permissions
 *  within the games they participate in. Access to game events (logs) is restricted.
 *
 * @data_structure
 * - /games/{gameId}: Stores game instances, accessible to authenticated users.
 * - /games/{gameId}/players/{userId}: Stores player-specific data within a game,
 *   primarily accessible to the player themselves and game creators.
 * - /events/{eventId}: Stores game events (logs). Write access is heavily restricted.
 *
 * @key_security_decisions
 * - Listing users is disallowed to protect privacy.
 * - Game creation is open to any authenticated user.
 * - Data validation is minimized for rapid prototyping but includes crucial
 *   checks for referential integrity and ownership.
 * - `events` are secured to prevent modifications
 *
 * @denormalization_for_authorization
 * - The `Player` document contains a `gameId` field, denormalized from the parent
 *   `Game` document. This allows rules on `/games/{gameId}/players/{userId}`
 *   to validate the player's association with the game without requiring additional `get()` calls.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows access to game instances.
     * @path /games/{gameId}
     * @allow (create) - Authenticated user can create a game. The `creator` field must match the user's UID.
     * @allow (get, list) - Authenticated user can read any game.
     * @allow (update, delete) - Only the game creator can update or delete a game.
     * @deny (create) - Unauthenticated user cannot create a game.
     * @deny (update, delete) - A non-creator user cannot update or delete a game.
     * @principle Enforces game ownership for writes, allows public read access.
     */
    match /games/{gameId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.creator == request.auth.uid;
      allow update, delete: if isSignedIn() && isExistingOwner(resource.data.creator);
    }

    /**
     * @description Manages player data within a specific game.
     * @path /games/{gameId}/players/{userId}
     * @allow (create) - Authenticated user can join a game as a player. The 'gameId' must match the parent path, and the 'userId' must match the user's UID.
     * @allow (get) - Authenticated user can read their own player data or if they are the game creator.
     * @allow (list) - Authenticated users can list players for a specific game.
     * @allow (update, delete) - Only the player themselves or the game creator can update/delete player data.
     * @deny (create) - User cannot create a player entry with a mismatched gameId or userId.
     * @deny (update, delete) - User cannot update or delete another player's data if they are not the game creator.
     * @principle Restricts player data access to the player themselves and the game creator.
     */
    match /games/{gameId}/players/{userId} {
      allow get: if isSignedIn() && (isOwner(userId) || isGameCreator(gameId));
      allow list: if isSignedIn();
      allow create: if isSignedIn() && request.resource.data.gameId == gameId && request.resource.data.userId == request.auth.uid;
      allow update, delete: if isSignedIn() && (isExistingOwner(userId) || isExistingGameCreator(gameId));
    }

     /**
      * @description Restricts access to game events (logs).
      * @path /events/{eventId}
      * @allow (get, list) - Authenticated users can read.
      * @deny (create, update, delete) - No one can create, update, or delete events through the client.
      * @principle Restricts write access to game events, allows public read.
      */
    match /events/{eventId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if false;
    }

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }

    function isGameCreator(gameId) {
        return get(/databases/$(database)/documents/games/$(gameId)).data.creator == request.auth.uid;
    }

    function isExistingGameCreator(gameId) {
        return isGameCreator(gameId) && resource != null;
    }
  }
}