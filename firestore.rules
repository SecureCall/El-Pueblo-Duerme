/**
 * @fileoverview Firestore Security Rules for "El Pueblo Duerme"
 *
 * Core Philosophy:
 * This ruleset prioritizes security and authorization independence through data denormalization.
 * It ensures that users can only access and modify data they are authorized to, while avoiding
 * costly and complex `get()` operations in the rules.
 *
 * Data Structure:
 * - /games/{gameId}: Stores general game information.
 * - /games/{gameId}/players/{userId}: Stores player-specific data for each game.
 * - /games/{gameId}/logs/{logId}: Stores game logs.
 *
 * Key Security Decisions:
 * - Public read access for Games collection.
 * - Owner-only write access for Games collection.
 * - Player documents are accessible only by the corresponding user within the game.
 * - Game logs are write-protected (server-only) but publicly readable.
 * - No user listing is allowed (privacy).
 *
 * Denormalization for Authorization:
 * - Player documents include a `gameId` field to enable independent authorization checks
 *   without needing to fetch the parent game document. This allows rules to directly validate
 *   if a player belongs to a specific game.
 *
 * Structural Segregation:
 * - Game logs are stored in a separate subcollection with restricted write access to ensure
 *   only the server can modify them. This separation maintains the integrity of the game state.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows any authenticated user to read Games. Creation/modification is limited to the game creator.
     * @path /games/{gameId}
     * @allow (get, list): if true
     * @allow (create): if request.auth != null && request.resource.data.creator == request.auth.uid
     * @allow (update, delete): if request.auth != null && resource.data.creator == request.auth.uid
     * @deny (create): if request.auth == null
     * @deny (update, delete): if request.auth == null || resource.data.creator != request.auth.uid
     * @principle Public read with owner-only writes.
     */
    match /games/{gameId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.creator == request.auth.uid;
      allow update, delete: if isSignedIn() && isExistingOwner(resource.data.creator);
    }

    /**
     * @description Ensures players can only access their own data within a given game.
     * @path /games/{gameId}/players/{userId}
     * @allow (get, list): if request.auth != null && request.auth.uid == userId
     * @allow (create): if request.auth != null && request.auth.uid == userId && request.resource.data.gameId == gameId && request.resource.data.userId == userId
     * @allow (update, delete): if request.auth != null && request.auth.uid == userId && resource.data.userId == userId
     * @deny (create): if request.auth == null || request.auth.uid != userId || request.resource.data.gameId != gameId || request.resource.data.userId != userId
     * @deny (update, delete): if request.auth == null || request.auth.uid != userId || resource.data.userId != userId
     * @principle Enforces document ownership for writes.
     */
    match /games/{gameId}/players/{userId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.gameId == gameId && request.resource.data.userId == userId;
      allow update, delete: if isSignedIn() && isExistingOwner(userId) && resource.data.userId == userId;
    }

    /**
     * @description Write access is restricted to server (e.g., Cloud Functions) only, ensuring that game state changes are reliably recorded. Read access is granted to any authenticated user for debugging/auditing.
     * @path /games/{gameId}/logs/{logId}
     * @allow (get, list): if true
     * @allow (create, update, delete): if false
     * @deny (create, update, delete): if true
     * @principle Restricts write access to server-side code for data integrity.
     */
    match /games/{gameId}/logs/{logId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }
  }
}