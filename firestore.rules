/**
 * @fileOverview Firestore Security Rules for "El Pueblo Duerme".
 *
 * Core Philosophy:
 * This ruleset prioritizes security by enforcing strict ownership and
 * access control. Data validation is relaxed to allow for rapid prototyping.
 *
 * Data Structure:
 * - /games/{gameId}: Contains game instances. Game creator has full control.
 *
 * Key Security Decisions:
 * - Users can only create, update, or delete games they own.
 * - Listing of games is publicly allowed.
 *
 * Denormalization for Authorization:
 *   - The `Game` entity contains a `creator` field, which stores the user ID of the game creator. This denormalization is crucial for efficiently checking ownership.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Manages access to individual game documents.
     * @path /games/{gameId}
     * @allow (create) User with UID 'user_abc' can create a game if they are the creator.
     * @allow (update) User with UID 'user_abc' can update a game if they are the creator.
     * @allow (delete) User with UID 'user_abc' can delete a game if they are the creator.
     * @allow (get, list) Any user can read the game data.
     * @deny (create) User with UID 'user_xyz' cannot create a game if 'user_abc' is the creator.
     * @deny (update) User with UID 'user_xyz' cannot update a game if 'user_abc' is the creator.
     * @deny (delete) User with UID 'user_xyz' cannot delete a game if 'user_abc' is the creator.
     * @principle Enforces game ownership for write operations and allows public read access.
     */
    match /games/{gameId} {
      allow get, list: if true;
      allow create: if request.auth != null && request.resource.data.creator == request.auth.uid;
      allow update: if isSignedIn() && isExistingOwner(resource.data.creator);
      allow delete: if isSignedIn() && isExistingOwner(resource.data.creator);
    }


    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
      return isSignedIn() && isOwner(userId) && resource != null;
    }
  }
}