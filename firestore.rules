/**
 * @fileoverview Firestore Security Rules for 'El Pueblo Duerme'.
 *
 * Core Philosophy:
 * This ruleset enforces a collaborative access control model for games.
 * Only authenticated users can create, join, update, or delete games.
 * Authorization checks focus on the current user's participation and role
 * within a game.
 *
 * Data Structure:
 * Games are stored in the `/games/{gameId}` collection. Each game document
 * contains all the necessary information for the game, including an array
 * of players.
 *
 * Key Security Decisions:
 * - Games are collaborative, and any user can join a game.
 * - The creator of the game has implicit admin privileges.
 * - Schema validation is relaxed in prototyping mode to allow rapid iteration.
 *
 * Denormalization for Authorization:
 * The 'players' array within the `/games/{gameId}` document is used to determine
 * whether a user is authorized to perform certain actions on the game. This
 * avoids costly `get()` operations to check player status in separate collections.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to individual game documents.
     * @path /games/{gameId}
     * @allow (get, list): Any user can read game documents.
     * @allow (create): Any authenticated user can create a game.
     * @allow (update): Only players who are part of the game can update the game.
     * @allow (delete): Only the game creator can delete the game.
     * @principle Enforces collaborative access with creator-based deletion.
     */
    match /games/{gameId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.creator == request.auth.uid;
      allow update: if isSignedIn() && isPlayer(gameId);
      allow delete: if isSignedIn() && isExistingOwner(gameId);
    }

    // ---- Helper functions ----

    /**
     * @description Checks if the user is signed in.
     * @returns {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the requesting user is the owner of the game.
     * @param {string} gameId The ID of the game.
     * @returns {boolean} True if the user is the owner, false otherwise.
     */
    function isOwner(gameId) {
      return get(/databases/$(database)/documents/games/$(gameId)).data.creator == request.auth.uid;
    }

    /**
     * @description Checks if the requesting user is the owner of the game and it exists.
     * @param {string} gameId The ID of the game.
     * @returns {boolean} True if the user is the existing owner, false otherwise.
     */
    function isExistingOwner(gameId) {
      return isOwner(gameId) && resource != null;
    }

    /**
     * @description Checks if the requesting user is a player in the game.
     * @param {string} gameId The ID of the game.
     * @returns {boolean} True if the user is a player, false otherwise.
     */
    function isPlayer(gameId) {
      return get(/databases/$(database)/documents/games/$(gameId)).data.players.hasAny(
          [request.auth.uid]
      );
    }
  }
}