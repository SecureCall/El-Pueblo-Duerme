/**
 * @file Firebase Security Rules for 'El Pueblo Duerme'
 *
 * @core_philosophy This ruleset enforces a role-based access control model for games, players, and events.
 *  Games have creators, and only the creator can modify the game's settings or delete the game. Players
 *  are associated with games, and only players who are part of a game can access game-related data like events.
 *
 * @data_structure
 *  - /games/{gameId}: Stores game metadata.
 *  - /games/{gameId}/players/{userId}: Stores player-specific data within a game.
 *  - /events/{eventId}: Stores game event logs.
 *
 * @key_security_decisions
 *  - Users cannot be listed.
 *  - The rules prioritize secure access based on game membership and roles within a game.
 *  - Data validation is limited to relational integrity and authorization fields in this prototyping phase.
 *
 * @denormalization_for_authorization
 *  - Player documents are nested under the specific game, allowing for game-specific authorization checks.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to the /games/{gameId} collection.
     * @path /games/{gameId}
     * @allow (create) Authenticated user can create a game with their user ID as the creator.
     * @allow (update) Game creator can update the game.
     * @allow (delete) Game creator can delete the game.
     * @deny (create) Non-authenticated user cannot create a game.
     * @deny (update) Non-creator cannot update the game.
     * @deny (delete) Non-creator cannot delete the game.
     * @principle Enforces document ownership for writes.
     */
    match /games/{gameId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if true;
      allow list: if true;

      allow create: if isSignedIn() && request.resource.data.creator == request.auth.uid;
      allow update: if isExistingOwner(resource.data.creator);
      allow delete: if isExistingOwner(resource.data.creator);
    }

    /**
     * @description Controls access to the /games/{gameId}/players/{userId} collection.
     * @path /games/{gameId}/players/{userId}
     * @allow (create) Authenticated user can create their own player document within a game.
     * @allow (get) Any authenticated user can get a player document.
     * @allow (list) Owner can list their players in the game
     * @allow (update) The player themselves can update their own player document.
     * @allow (delete) No one can delete a player document directly (handled by game logic).
     * @deny (create) Non-authenticated user cannot create a player document.
     * @deny (update) Another user cannot update someone else's player document.
     * @deny (delete) Any user cannot delete player
     * @principle Enforces document ownership for writes and reads.
     */
    match /games/{gameId}/players/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isSignedIn();
      allow list: if isOwner(userId);

      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if false;
    }

   /**
     * @description Controls access to the /games/{gameId}/events collection.
     * @path /games/{gameId}/events
     * @allow (get) Any authenticated user can read an event.
     * @allow (list) Any authenticated user can list game event.
     * @deny (create) No one can create an event directly (handled by server-side logic).
     * @deny (update) No one can update an event.
     * @deny (delete) No one can delete an event.
     * @principle Restricts write access to game events and allows read access to any authenticated user.
     */
    match /games/{gameId}/events/{eventId} {
       function isSignedIn() {
            return request.auth != null;
       }
        allow get: if isSignedIn();
        allow list: if isSignedIn();
        allow create: if false;
        allow update: if false;
        allow delete: if false;
    }
  }
}