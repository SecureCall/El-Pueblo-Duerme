/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a role-based access control model for the 'El Pueblo Duerme' application.
 *
 * Data Structure:
 * - /games/{gameId}: Stores game instances.
 * - /games/{gameId}/players/{userId}: Stores player data for each game.
 * - /events/{eventId}: Stores game logs.
 *
 * Key Security Decisions:
 * - Users can only create games.
 * - Only game creators can modify games.
 * - Players data is only accessible to themselves.
 * - Game events can be listed by any authenticated user.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to game documents.
     * @path /games/{gameId}
     * @allow (create) - Authenticated user can create a new game.
     * @deny (update) - Non-creator attempts to update the game.
     * @principle Enforces creator-only write access and authenticated read access.
     */
    match /games/{gameId} {
      // games can be created by any signed in user
      allow create: if isSignedIn() && request.resource.data.creator == request.auth.uid;
      allow get: if true;
      allow list: if true;
      // games can only be updated or deleted by their creator
      allow update: if isExistingOwner(resource.data.creator);
      allow delete: if isExistingOwner(resource.data.creator);
    }

    /**
     * @description Controls access to player documents within a game.
     * @path /games/{gameId}/players/{userId}
     * @allow (create) - Authenticated user can create their own player document within a game.
     * @deny (update) - User attempts to update another user's player document.
     * @principle Enforces user-ownership within the /games/{gameId}/players/{userId} subcollection.
     */
    match /games/{gameId}/players/{userId} {
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow get: if isOwner(userId);
      allow list: if false;
      allow update: if isExistingOwner(userId);
      allow delete: if false;
    }

     /**
      * @description Controls access to game event documents.
      * @path /events/{eventId}
      * @allow (get) - Any authenticated user can read a game event.
      * @deny (create) - No one can create a game event.
      * @principle Game events are intended to be publicly readable to signed-in users, but writes are restricted.
      */
    match /events/{eventId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    // ---- Helper functions ---

    /**
     * @description Checks if the user is signed in.
     * @return {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user is the owner of the resource based on the provided userId.
     * @param {string} userId - The user ID to compare against the request's authentication UID.
     * @return {boolean} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the user is the existing owner of the resource and the resource exists.
     * @param {string} userId - The user ID to compare against the resource's owner ID.
     * @return {boolean} True if the user is the owner and the resource exists, false otherwise.
     */
    function isExistingOwner(userId) {
      return isSignedIn() && isOwner(userId) && resource != null;
    }
  }
}