/**
 * @fileoverview Firestore Security Rules for 'El Pueblo Duerme' application.
 *
 * Core Philosophy:
 * This ruleset prioritizes secure access control based on user authentication and explicit game and player relationships.
 * It enforces strict ownership and role-based access where applicable, while remaining flexible on data validation to allow for rapid prototyping.
 *
 * Data Structure:
 * - /games/{gameId}: Stores individual game instances, with 'creator' field indicating the game creator.
 * - /games/{gameId}/players/{userId}: Stores player-specific data within a game.
 * - /events/{eventId}: Stores game events.
 *
 * Key Security Decisions:
 * - Players can only list events for a specific game they are participating in.
 * - Users can create a game.
 * - Users cannot directly read other user documents.
 *
 * Denormalization for Authorization:
 * - The 'Player' entity contains denormalized 'gameId' to enable independent authorization checks without joins.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows management of a specific game instance.
     * @path /games/{gameId}
     * @allow (create) User 'user_abc' can create a game.
     * @deny (create) User 'user_xyz' cannot create a game where request.resource.data.creator != request.auth.uid.
     * @allow (get) Any authenticated user can get a game.
     * @allow (list) Any authenticated user can list games.
     * @allow (update, delete) The creator of the game ('user_abc') can update or delete the game.
     * @deny (update, delete) A non-creator ('user_xyz') cannot update or delete the game.
     * @principle Enforces document ownership for writes, allows public reads.
     */
    match /games/{gameId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.creator == request.auth.uid;
      allow update, delete: if isSignedIn() && isExistingOwner(resource.data.creator);
    }

    /**
     * @description Allows management of player data within a specific game.
     * @path /games/{gameId}/players/{userId}
     * @allow (create) User 'user_abc' can create their player profile within game 'game_123' if request.auth.uid == userId.
     * @deny (create) User 'user_xyz' cannot create a player profile for another user.
     * @allow (get, list) Any authenticated user can read list player in the game.
     * @allow (update, delete) A player ('user_abc') can update or delete their own player profile.
     * @deny (update, delete) A non-player ('user_xyz') cannot update or delete another player's profile.
     * @principle Enforces document ownership for writes, allows public reads.
     */
    match /games/{gameId}/players/{userId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update, delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Allows reading game event data.  Write operations are disallowed.
     * @path /games/{gameId}/events/{eventId}
     * @allow (get, list) Any authenticated user can read list game events.
     * @deny (create, update, delete) No one can create, update, or delete game events through the client.
     * @principle Restricts write access to game events, allows public reads.
     */
    match /games/{gameId}/events/{eventId} {
      allow get, list: if isPlayerInGame(gameId);
      allow create, update, delete: if false;
    }

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    function isPlayerInGame(gameId) {
        return exists(/databases/$(database)/documents/games/$(gameId)/players/$(request.auth.uid));
    }
  }
}