/**
 * @fileoverview Firestore Security Rules for El Pueblo Duerme.
 *
 * Core Philosophy:
 * This ruleset prioritizes secure data access based on user authentication and
 * explicit ownership. It leverages denormalization and path-based authorization
 * to simplify and optimize rule evaluation. Data validation is relaxed to allow for
 * rapid prototyping and schema evolution.
 *
 * Data Structure:
 * - /games/{gameId}: Stores game instances, with the 'creator' field indicating ownership.
 * - /games/{gameId}/players/{userId}: Stores player data within a game, with 'gameId' and 'userId' for authorization.
 * - /events/{eventId}: Stores global game events. Read access is public, write access is restricted.
 *
 * Key Security Decisions:
 * - User listing is disallowed.
 * - Ambiguous relationships default to strict owner-only access.
 * - All write operations are explicitly authorized, preventing accidental open access.
 *
 * Denormalization for Authorization:
 * - The /games/{gameId}/players/{userId} path utilizes both gameId and userId in the path,
 *   allowing rules to be enforced without reading the document.
 *
 * Structural Segregation:
 * - No explicit segregation is used in this data model.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is authenticated.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user is the owner (creator) of the document.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is the owner of an existing document.
     *              This function verifies both ownership and document existence for update/delete operations.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Rules for the /games/{gameId} collection.
     * @path /games/{gameId}
     * @allow (create) Authenticated user creates a game with creator field set to their UID.
     * @allow (get, list) Authenticated user reads a game.
     * @allow (update, delete) Authenticated user updates/deletes a game they created.
     * @deny (create) Unauthenticated user attempts to create a game.
     * @deny (update) Authenticated user attempts to update a game they don't own.
     * @principle Enforces document ownership for writes, allows public reads.
     */
    match /games/{gameId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.creator == request.auth.uid;
      allow update: if isExistingOwner(resource.data.creator);
      allow delete: if isExistingOwner(resource.data.creator);
    }

    /**
     * @description Rules for the /games/{gameId}/players/{userId} collection.
     * @path /games/{gameId}/players/{userId}
     * @allow (create) Authenticated user creates their player entry in a game (userId matches auth.uid).
     * @allow (get, list) Authenticated user reads list of players in a game.
     * @allow (update, delete) Authenticated user updates/deletes their own player entry.
     * @deny (create) User attempts to create a player entry with mismatched userId.
     * @deny (update) User attempts to update another user's player entry.
     * @principle Enforces document ownership within a subcollection, using path-based authorization.
     */
    match /games/{gameId}/players/{userId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for the /events/{eventId} collection.
     * @path /events/{eventId}
     * @allow (get, list) Any authenticated user can read events.
     * @deny (create, update, delete) No one can create, update, or delete events (admin-only).
     * @principle Public read access, restricted write access.
     */
    match /events/{eventId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }
  }
}