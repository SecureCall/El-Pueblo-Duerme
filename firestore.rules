/**
 * @fileoverview Firestore Security Rules for El Pueblo Duerme.
 *
 * Core Philosophy:
 * This ruleset prioritizes secure data access based on user authentication and
 * explicit ownership. It avoids overly permissive rules to ensure data integrity.
 *
 * Data Structure:
 * - /games/{gameId}: Stores game instances.
 * - /games/{gameId}/players/{userId}: Stores player-specific data within a game.
 * - /events/{eventId}: Stores game event logs.
 *
 * Key Security Decisions:
 * - Players can only create their own player documents within a game, and only if the game exists.
 * - Game event logs are not directly writable by clients (create, update, delete are all denied).
 *
 * Denormalization for Authorization:
 * - The 'Player' entity includes both 'userId' and 'gameId', enabling independent
 *   authorization without needing to query parent documents. This approach is
 *   critical for performance and prevents potential rule limitations.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows read access to any game.  Only the game creator can modify the game.
     * @path /games/{gameId}
     * @allow (get, list): Any user can read game information.
     * @allow (create): Only the game creator, request.auth.uid can create the game.
     * @allow (update, delete): Only the game creator, resource.data.creator can update or delete the game.
     * @deny (create): if request.auth.uid != request.resource.data.creator.
     * @deny (update, delete): if request.auth.uid != resource.data.creator.
     * @principle Enforces game ownership for writes.  Allows open reads.
     */
    match /games/{gameId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.creator == request.auth.uid;
      allow update, delete: if isSignedIn() && request.resource.data.creator == request.auth.uid;

      /**
       * @description Allows a player to create their own player document within a game.
       * @path /games/{gameId}/players/{userId}
       * @allow (create): Authenticated user can create their own player document.
       * @allow (get, list): Authenticated user can get and list.
       * @allow (update, delete): Authenticated user can update/delete their own player doc.
       * @deny (create): If the authenticated user's ID does not match the userId in the document.
       * @deny (update, delete): if user is not the owner and resource == null.
       * @principle Enforces player-document ownership.
       */
      match /games/{gameId}/players/{userId} {
        allow get, list: if isSignedIn() && request.auth.uid == userId;
        allow create: if isSignedIn() && request.auth.uid == userId;
        allow update, delete: if isSignedIn() && request.auth.uid == userId;
      }
    }

    /**
     * @description Allows read access to game event logs for authenticated users, but denies all write operations.
     * @path /events/{eventId}
     * @allow (get, list): Any authenticated user can read game event logs.
     * @deny (create, update, delete): No client-side write operations are allowed on game event logs.
     * @principle Logs are read-only for clients.
     */
    match /events/{eventId} {
      allow get, list: if isSignedIn();
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Checks if the request is authenticated.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the request is made by the owner (userId matches request.auth.uid).
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
  }
}