/**
 * @file Overview
 * This ruleset enforces a role-based access control model for the "El Pueblo Duerme" game application.
 *
 * Data Structure:
 * - /games/{gameId}: Stores game instances.
 * - /games/{gameId}/players/{userId}: Stores player-specific data for each game.
 * - /games/{gameId}/logs/{logId}: Stores game logs. Write access is restricted to the server.
 *
 * Key Security Decisions:
 * - Games: Any authenticated user can read games, but only the creator can modify them.
 * - Players: Players can only access their own data within a game.
 * - Game Logs: Write access is restricted to the server, while read access is available to authenticated users.
 * - Authorization Independence: Achieved through data denormalization, avoiding the use of `get()` calls.
 *
 * Denormalization for Authorization:
 * - The 'Player' entity includes a denormalized 'gameId' to ensure authorization independence. This helps ensure atomic
 * operations and simplifies debugging.
 *
 * Structural Segregation:
 *  The logs are in their own collection and write access to this collection is only possible via the server.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to the games collection.
     * @path /games/{gameId}
     * @allow get, list: Any authenticated user can read games.
     * @allow create: Only an authenticated user can create a game, and the creator field must match their user ID.
     * @allow update, delete: Only the game creator can update or delete a game.
     * @deny create: If the creator field does not match the authenticated user's ID.
     * @deny update, delete: If the user is not the game creator.
     * @principle Enforces game ownership for writes.
     */
    match /games/{gameId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn() && request.resource.data.creator == request.auth.uid;
      allow update, delete: if isExistingOwner(resource.data.creator);

    }

    /**
     * @description Controls access to player data within a game.
     * @path /games/{gameId}/players/{userId}
     * @allow get: A player can only read their own data within a game.
     * @allow list: Only the owner can list their own players.
     * @allow create: A user can create their own player document.
     * @allow update, delete: A player can update or delete their own data.
     * @deny create: If the userId field does not match the authenticated user's ID.
     * @deny update, delete: If the user is not the player being accessed.
     * @principle Enforces player ownership within a game.
     */
    match /games/{gameId}/players/{userId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == request.auth.uid;
      allow update, delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to game logs.
     * @path /games/{gameId}/logs/{logId}
     * @allow get, list: Any authenticated user can read game logs for debugging/auditing.
     * @deny create, update, delete: Only server-side code can write game logs.
     * @principle Restricts write access to the server for reliable game state recording.
     */
    match /games/{gameId}/logs/{logId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if false;
    }

    // --- Helper Functions ---

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }
  }
}