/**
 * @fileOverview Firestore Security Rules for "El Pueblo Duerme".
 *
 * Core Philosophy:
 * This ruleset prioritizes strong authorization based on user identity and explicit relationships.
 * It adopts a flexible data model to facilitate rapid prototyping.
 *
 * Data Structure:
 * - /games/{gameId}: Stores game instances, with creator field indicating ownership.
 * - /games/{gameId}/players/{userId}: Stores player data within a game.  The userId in the path must match the player's userId field in the document.
 * - /events/{eventId}: Stores game event logs; write access is restricted, while read access is public for authenticated users.
 *
 * Key Security Decisions:
 * - User listing is not allowed (to protect user privacy).
 * - Read access to game event logs is public for authenticated users to enable game replays and activity streams.
 * - Documents in user-scoped paths (e.g., /games/{gameId}/players/{userId}) must have a 'userId' field that matches the userId parameter in the path.
 *
 * Denormalization for Authorization:
 * - Player documents denormalize 'gameId' to allow for independent authorization without requiring parent document access.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Secures the /games collection. Allows anyone to read games. Only the creator can modify a game.
     * @path /games/{gameId}
     * @allow (create) User 'abc' can create a game if request.resource.data.creator matches their uid.
     * @deny (create) User 'def' cannot create a game if request.resource.data.creator does not match their uid.
     * @principle Enforces ownership for game creation and modification. Public read access is allowed.
     */
    match /games/{gameId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.creator == request.auth.uid;
      allow update, delete: if isSignedIn() && resource.data.creator == request.auth.uid && resource != null;
    }

    /**
     * @description Secures the /games/{gameId}/players collection.  Players can be added to a game. Only the player themselves can modify their player data.
     * @path /games/{gameId}/players/{userId}
     * @allow (create) User 'abc' can create a player document if their UID matches the {userId} and the player document has a `userId` field set to 'abc'.
     * @deny (create) User 'def' cannot create a player document for user 'abc'.
     * @principle Enforces that a user can only create their own player document, and that the document's userId field matches the path.
     */
    match /games/{gameId}/players/{userId} {
      allow get, list: if true;
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId;
      allow update, delete: if isSignedIn() && isOwner(userId) && resource != null;
    }

    /**
     * @description Secures the /events collection. Only authenticated users can read events.  Write access is denied.
     * @path /events/{eventId}
     * @allow (get) Any authenticated user can read a game event.
     * @deny (create) No one can create an event.
     * @principle Read access is public for authenticated users; write access is forbidden.
     */
    match /events/{eventId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if false;
    }
  }
}