/**
 * @file Firebase Security Rules for 'El Pueblo Duerme' (Prototyping Mode)
 *
 * @description This ruleset enforces a game-centric access control model. Each game
 *   has players. Only authenticated users can access game data. Schema validation is
 *   relaxed to allow for rapid iteration.
 *
 * @dataStructure
 *   - /games/{gameId}: Stores game instances. The 'creator' field determines ownership.
 *   - /games/{gameId}/players/{userId}: Stores player data for each game.
 *   - /events/{eventId}: Stores game events. Public read access is allowed, while write access is restricted.
 *
 * @keySecurityDecisions
 *   - Listing of games or events is allowed for any authenticated user.
 *   - Player data access is restricted to authenticated users only.
 *   - The 'creator' field in the /games/{gameId} document is used to determine ownership.
 *
 * @denormalizationForAuthorization
 *   - Player documents include `gameId` to simplify security rules and avoid expensive `get()` calls.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secures the /games/{gameId} collection.
     * @path /games/{gameId}
     * @allow (create) Authenticated user can create a new game, `request.auth.uid` must match `request.resource.data.creator`.
     * @allow (get, list) Authenticated user can read a game.
     * @allow (update, delete) Only the game creator can update or delete the game.
     * @deny (create) An unauthenticated user cannot create a new game.
     * @deny (update, delete) A non-creator cannot update or delete the game.
     * @principle Enforces document ownership for writes, allows public reads.
     */
    match /games/{gameId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn() && request.resource.data.creator == request.auth.uid;
      allow update, delete: if isSignedIn() && isExistingOwner(resource.data.creator);
    }

    /**
     * @description Secures the /games/{gameId}/players/{userId} collection.
     * @path /games/{gameId}/players/{userId}
     * @allow (create) Authenticated user can create a new player, `request.auth.uid` must match `userId`.
     * @allow (get, list) Authenticated user can read a player.
     * @allow (update, delete) Only the user associated with the player ID can update or delete their player data.
     * @deny (create) An unauthenticated user cannot create a new player.
     * @deny (update, delete) A non-owner cannot update or delete the player.
     * @principle Enforces document ownership for writes, allows public reads.
     */
    match /games/{gameId}/players/{userId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update, delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Secures the /events/{eventId} collection.
     * @path /events/{eventId}
     * @allow (get, list) Any authenticated user can read game events.
     * @deny (create, update, delete) No one can create, update, or delete game events.
     * @principle Restricts write access to game events.
     */
    match /events/{eventId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if false;
    }

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
        return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }
  }
}