/**
 * @fileoverview Firestore Security Rules for "El Pueblo Duerme"
 *
 * Core Philosophy:
 * This ruleset prioritizes security by enforcing ownership and role-based access control.
 * It leverages denormalization to avoid costly `get()` calls and improve rule performance.
 *
 * Data Structure:
 * - /games/{gameId}: Stores general game information.
 * - /games/{gameId}/players/{userId}: Stores player-specific data for each game.
 * - /games/{gameId}/logs/{logId}: Stores game logs.
 *
 * Key Security Decisions:
 * - Authenticated users can list all games.
 * - Only the game creator can modify a game.
 * - Players can only access their own data within a game.
 * - Game log writes are restricted to server-side code.
 *
 * Denormalization for Authorization:
 * - Player documents include a denormalized 'gameId' field.  This allows player rules to validate the player's context without needing to fetch the parent Game document.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to the /games/{gameId} collection.
     * @path /games/{gameId}
     * @allow (list) Authenticated user listing all games.
     * @allow (get) Authenticated user getting a specific game.
     * @allow (create) Authenticated user creating a game with creator field matching their UID.
     * @allow (update) Authenticated user updating a game they created.
     * @allow (delete) Authenticated user deleting a game they created.
     * @deny (create) Authenticated user creating a game with creator field not matching their UID.
     * @deny (update) Authenticated user updating a game they didn't create.
     * @deny (delete) Authenticated user deleting a game they didn't create.
     * @principle Authenticated users can read all games but only the game creator can modify.
     */
    match /games/{gameId} {
      // Helper function to check if the user is signed in
      function isSignedIn() {
        return request.auth != null;
      }

      // Helper function to check if the user is the owner of the game
      function isOwner() {
        return isSignedIn() && resource.data.creator == request.auth.uid;
      }

      allow get, list: if isSignedIn();
      allow create: if isSignedIn() && request.resource.data.creator == request.auth.uid;
      allow update: if isOwner();
      allow delete: if isOwner();
    }

    /**
     * @description Controls access to the /games/{gameId}/players/{userId} collection.
     * @path /games/{gameId}/players/{userId}
     * @allow (get) Authenticated user getting their own player document within a game.
     * @allow (list) Authenticated user listing player documents within a game (typically for game management).
     * @allow (create) Authenticated user creating their own player document within a game, with userId and gameId matching the path.
     * @allow (update) Authenticated user updating their own player document within a game.
     * @allow (delete) Authenticated user deleting their own player document within a game.
     * @deny (create) Authenticated user creating a player document with userId or gameId not matching the path.
     * @deny (update) Authenticated user updating a player document that isn't theirs.
     * @deny (delete) Authenticated user deleting a player document that isn't theirs.
     * @principle Players can only access and modify their own data within a specific game.
     */
    match /games/{gameId}/players/{userId} {
      // Helper function to check if the user is the owner of the player document
      function isOwner() {
        return isSignedIn() && request.auth.uid == userId;
      }

      allow get: if isOwner();
      allow list: if isSignedIn();
      allow create: if request.auth.uid == userId && request.resource.data.gameId == gameId;
      allow update: if isOwner();
      allow delete: if isOwner();
    }

    /**
     * @description Controls access to the /games/{gameId}/logs/{logId} collection.
     * @path /games/{gameId}/logs/{logId}
     * @allow (get) Authenticated user getting a specific log entry.
     * @allow (list) Authenticated user listing log entries for a game.
     * @deny (create) All create operations.
     * @deny (update) All update operations.
     * @deny (delete) All delete operations.
     * @principle Write access is restricted to the server; read access is open to all authenticated users.
     */
    match /games/{gameId}/logs/{logId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if false;
    }
  }
}