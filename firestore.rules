/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict user-ownership model for data access.
 *
 * Data Structure:
 * - /games/{gameId}: Games are stored here.  The `creator` field on the document indicates the owning user.
 * - /games/{gameId}/messages/{messageId}: Game messages. Anyone who can read the game can read the messages
 *
 * Key Security Decisions:
 * - Users can only read games.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user is the owner of the resource.
     * @param {string} userId - The user ID to check against.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the user is the existing owner of the resource (isSignedIn, isOwner, and resource exists).
     * @param {string} userId - The user ID to check against.
     */
    function isExistingOwner(ownerId, gameId) {
      return isSignedIn() && request.auth.uid == ownerId && existsAfter(/databases/$(database)/documents/games/$(gameId));
    }

    /**
     * @description Games can be read, but only created by an owner.
     * @path /games/{gameId}
     * @allow (get, list) if true
     * @allow (create) if request.auth.uid == request.resource.data.creator
     * @deny (create) if request.auth.uid != request.resource.data.creator
     * @allow (update) if isExistingOwner(resource.data.creator)
     * @deny (update) if !isExistingOwner(resource.data.creator)
     * @allow (delete) if isExistingOwner(resource.data.creator)
     * @deny (delete) if !isExistingOwner(resource.data.creator)
     * @principle Enforces document ownership for writes.  Allows public reads.
     */
    match /games/{gameId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource.data.creator == request.auth.uid;
      allow delete: if isSignedIn() && resource.data.creator == request.auth.uid;
    }

    /**
     * @description Anyone who can read the game can read the messages
     * @path /games/{gameId}/messages/{messageId}
     * @allow (get, list) if true
     * @allow (create) if true
     * @allow (update) if false
     * @allow (delete) if false
     * @principle Enforces document ownership for writes.  Allows public reads.
     */
    match /games/{gameId}/messages/{messageId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if false;
    }
  }
}