rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isPlayerInGame(gameId, userId) {
      return get(/databases/$(database)/documents/games/$(gameId)).data.players.exists(p, p.userId == userId);
    }
    
    function isGameCreator(gameId, userId) {
      return get(/databases/$(database)/documents/games/$(gameId)).data.creator == userId;
    }

    match /games/{gameId} {
      // Anyone can read a game's data. This is necessary for players to see the game state.
      allow read: if true;

      // Allow creating a new game if the user is authenticated.
      // The creator's ID must match the authenticated user's ID.
      // The initial players array must be empty.
      allow create: if request.auth != null && request.resource.data.creator == request.auth.uid && request.resource.data.players.size() == 0;
      
      // Allow updates (joining, playing, etc.) under specific conditions.
      allow update: if request.auth != null && (
        // Condition 1: An existing player is making a valid update.
        (isPlayerInGame(gameId, request.auth.uid)) ||
        // Condition 2: A new player is joining a "waiting" game that is not yet full.
        (resource.data.status == 'waiting' && 
         request.resource.data.players.size() == resource.data.players.size() + 1 &&
         !isPlayerInGame(gameId, request.auth.uid) &&
         request.resource.data.players.size() <= resource.data.maxPlayers
        ) ||
        // Condition 3: Allow the creator to start the game.
        (isGameCreator(gameId, request.auth.uid) && resource.data.status == 'waiting' && request.resource.data.status == 'in_progress')
      );
      
      // Nobody can delete a game document directly.
      allow delete: if false;
    }
  }
}
