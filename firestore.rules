/**
 * @fileoverview Firestore Security Rules for the "El Pueblo Duerme" application.
 *
 * Core Philosophy:
 * This ruleset prioritizes security by enforcing strict ownership and access controls.
 * Server-side logic (Cloud Functions) is assumed to manage complex game state transitions
 * and critical data modifications, while these rules protect against unauthorized client-side
 * manipulations, particularly regarding roles and votes.
 *
 * Data Structure:
 * - /games/{gameId}: Contains game instances with embedded player and event data.
 *
 * Key Security Decisions:
 * - Prevents direct client-side modifications of game-critical fields like roles and votes.
 * - Relies on server-side logic for sensitive operations.
 * - Allows public read access to game data for display purposes.
 *
 * Denormalization for Authorization:
 * - Game documents contain a `creator` field, simplifying ownership checks without requiring additional reads.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to game documents.
     * @path /games/{gameId}
     * @allow (get, list): Any user can read game data.
     * @allow (create): Only the user whose auth UID matches the `creator` field can create a game.
     * @allow (update, delete): Only the game creator can update or delete the game, and only if it exists.
     * @deny (create): If the creator field in the request does not match the authenticated user's ID.
     * @deny (update, delete): If the game does not exist.
     * @deny (update, delete): If the user is not the game creator.
     * @principle Enforces owner-only writes and public reads for game data.
     */
    match /games/{gameId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.creator == request.auth.uid;
      allow update, delete: if isExistingOwner(resource.data.creator);

    }

    // ===== Helper Functions =====

    /**
     * @description Checks if the user is signed in.
     * @returns {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user is the owner of the document based on the provided userId.
     * @param {string} userId The user ID to compare against the authenticated user's ID.
     * @returns {boolean} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the user is the owner of the document and the document exists.
     * @param {string} userId The user ID to compare against the authenticated user's ID.
     * @returns {boolean} True if the user is the owner and the document exists, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }
  }
}