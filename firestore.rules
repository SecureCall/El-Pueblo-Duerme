/**
 * @file Firebase Security Rules for 'El Pueblo Duerme' (Prototyping Mode)
 *
 * @description
 * This ruleset enforces a strict access control model focused on user authentication and data ownership,
 * while relaxing data validation to facilitate rapid prototyping. It prioritizes security by default,
 * restricting access unless explicitly granted.
 *
 * Data Structure:
 * - /games/{gameId}: Stores game instances.
 * - /games/{gameId}/players/{userId}: Stores player data for each game.
 * - /events/{eventId}: Stores game events (logs).  These events are globally accessible.
 *
 * Key Security Decisions:
 * - All authenticated users can list the events collection.
 * - Data validation is minimized to focus on authorization, enabling flexible data shapes during prototyping.
 * - Write access to the `/events` collection is denied.  This is intended to be write-only via backend functions.
 * - The ruleset leverages denormalization to simplify authorization checks and improve performance.
 *
 * Denormalization for Authorization:
 * - The `Player` entity includes a `gameId` field, denormalizing the game association to allow direct authorization
 *   checks without requiring parent document reads.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Root-level access restrictions.  No direct reads or writes are permitted at the root.
     * @path /
     * @allow (get, list) N/A - Root access is not permitted.
     * @deny (create, update, delete) All operations are denied.
     * @principle Prevents accidental data exposure or modification at the database root.
     */
    match /{document=**} {
      allow read, write: if false;
    }

    /**
     * @description Controls access to the /games/{gameId} collection.
     * @path /games/{gameId}
     * @allow (get) Any authenticated user can read a game document.
     * @allow (list) Any authenticated user can list games.
     * @allow (create) Any authenticated user can create a game document if the 'creator' field matches their UID.
     * @allow (update, delete) Only the user who created the game can update or delete it.
     * @deny (create) A user cannot create a game if the 'creator' field does not match their UID.
     * @deny (update, delete) A user cannot update or delete a game they did not create.
     * @principle Enforces ownership for game creation, updates, and deletions.
     */
    match /games/{gameId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn() && request.resource.data.creator == request.auth.uid;
      allow update, delete: if isSignedIn() && request.resource.data.creator == request.auth.uid;
    }

    /**
     * @description Controls access to the /games/{gameId}/players/{userId} subcollection.
     * @path /games/{gameId}/players/{userId}
     * @allow (get) Any authenticated user can read a player document.
     * @allow (list) Any authenticated user can list player documents within a game.
     * @allow (create) Any authenticated user can create a player document if their UID matches the 'userId' path segment.
     * @allow (update, delete) Only the user who is the player can update or delete their player document.
     * @deny (create) A user cannot create a player document if their UID does not match the 'userId' path segment.
     * @deny (update, delete) A user cannot update or delete a player document if they are not the player.
     * @principle Enforces ownership for player creation, updates, and deletions within a specific game.
     */
    match /games/{gameId}/players/{userId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update, delete: if isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Controls access to the /games/{gameId}/events collection.
     * @path /games/{gameId}/events
     * @allow (get) Any authenticated user can read an event document.
     * @allow (list) Any authenticated user can list event documents within a game.
     * @deny (create, update, delete) No one can create, update, or delete event documents through the client.
     * @principle Restricts write access to events, allowing only authenticated users to read existing events.
     */
    match /games/{gameId}/events/{eventId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if false;
    }

    /**
     * @description Controls access to the /events/{eventId} collection.
     * @path /events/{eventId}
     * @allow (get) Any authenticated user can read an event document.
     * @allow (list) Any authenticated user can list events.
     * @deny (create, update, delete) No one can create, update, or delete event documents through the client.
     * @principle Restricts write access to events, allowing only authenticated users to read existing events.
     */
    match /events/{eventId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if false;
    }

    // ---- Helper functions ----

    /**
     * @description Checks if the user is signed in.
     * @return {bool} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user is the owner of the resource, and that the resource exists.
     * @param {string} userId The user ID to check against the resource.
     * @return {bool} True if the user is the owner and the resource exists, false otherwise.
     */
    function isExistingOwner(userId) {
      return isSignedIn() && resource.data.creator == request.auth.uid;
    }
  }
}