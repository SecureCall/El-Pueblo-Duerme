/**
 * @fileoverview Firestore Security Rules for "El Pueblo Duerme" Game.
 *
 * Core Philosophy:
 * This ruleset prioritizes authorization independence and enforces fine-grained
 * access control based on user identity and document ownership. It avoids
 * complex queries within the rules to ensure scalability and maintainability.
 *
 * Data Structure:
 * - /games/{gameId}: Stores game instances.
 * - /games/{gameId}/players/{userId}: Stores player data for each game.
 * - /games/{gameId}/logs/{logId}: Stores game logs (server-write only).
 *
 * Key Security Decisions:
 * - Any authenticated user can read any game or log.
 * - Games can only be created/modified by their creator.
 * - Players can only manage their own player document within a game.
 * - Game logs can only be written by the server.
 * - Denormalization: The `gameId` is stored within each player document to
 *   simplify and optimize authorization checks.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to game documents.
     * @path /games/{gameId}
     * @allow get, list: Any authenticated user can read game data.
     * @allow create: Only the authenticated user creating the game. The creator field must match the authenticated user ID.
     * @allow update, delete: Only the user who created the game can modify or delete it.
     * @deny create: If the creator field does not match the authenticated user ID.
     * @deny update, delete: If the authenticated user is not the creator.
     * @principle Enforces game ownership for writes.
     */
    match /games/{gameId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn() && request.resource.data.creator == request.auth.uid;
      allow update, delete: if isSignedIn() && resource.data.creator == request.auth.uid;
    }

    /**
     * @description Controls access to player documents within a specific game.
     * @path /games/{gameId}/players/{userId}
     * @allow get, list: Only the player themselves can read or list their data.
     * @allow create: Only the player themselves. The userId must match the authenticated user ID.
     * @allow update, delete: Only the player themselves can modify or delete their data.
     * @deny create: If the userId field does not match the authenticated user ID.
     * @deny update, delete: If the authenticated user is not the player.
     * @principle Enforces player ownership within a game context.
     */
    match /games/{gameId}/players/{userId} {
      allow get, list: if isSignedIn() && userId == request.auth.uid;
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid && request.resource.data.gameId == gameId;
      allow update, delete: if isSignedIn() && resource.data.userId == request.auth.uid;
    }

    /**
     * @description Controls access to game log documents.
     * @path /games/{gameId}/logs/{logId}
     * @allow get, list: Any authenticated user can read game logs.
     * @deny create, update, delete: Only the server can write game logs.
     * @principle Restricts write access to game logs to the server.
     */
    match /games/{gameId}/logs/{logId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if false;
    }

    // Helper function to check if a user is signed in.
    function isSignedIn() {
      return request.auth != null;
    }
  }
}