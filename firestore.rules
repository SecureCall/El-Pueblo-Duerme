/**
 * @fileoverview Firestore Security Rules for "El Pueblo Duerme"
 *
 * Core Philosophy:
 * This ruleset prioritizes strong authorization controls, ensuring that only
 * authenticated users can access specific data. It employs a mix of
 * ownership-based access and shared access patterns. Data schema validation is
 * relaxed in the prototyping phase to facilitate rapid development.
 *
 * Data Structure:
 * - /games/{gameId}: Stores game instances. Games are created by a user, and
 *   this user becomes the initial owner/administrator.
 * - /games/{gameId}/players/{userId}: Stores player data for each game. This
 *   data includes role, status, and other game-specific information.
 * - /events/{eventId}: Stores game event logs. Only the server can create these. Authenticated users can read.
 *
 * Key Security Decisions:
 * - User listing is not allowed.
 * - All write operations require authentication.
 * - Game creation is restricted to authenticated users.
 * - Player data is protected, ensuring that only the player themselves can
 *   modify their own data within a game.
 * - Game events are readable by all authenticated users but only writable by the backend.
 *
 * Denormalization for Authorization:
 * - The 'Player' documents under /games/{gameId}/players/{userId} SHOULD contain
 *   a denormalized 'gameId' field. This will allow for direct validation of
 *   the game ID in the rules, avoiding the need for costly and potentially
 *   impossible `get()` calls to the parent `/games/{gameId}` document.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is made by a signed-in user.
     * @return {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user ID matches the provided user ID.
     * @param {string} userId - The user ID to compare against the authenticated user's ID.
     * @return {boolean} True if the user IDs match, false otherwise.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is the owner of an existing resource.
     * @param {string} userId - The user ID of the resource owner.
     * @return {boolean} True if the user is the owner and the resource exists.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Rules for the /games/{gameId} collection.
     * @path /games/{gameId}
     * @allow (create) - Authenticated user creates a new game. `request.auth.uid` must match `request.resource.data.creator`.
     * @allow (get, list) - Any authenticated user can read a game.
     * @allow (update, delete) - Only the creator can update/delete the game.
     * @deny (create) - User attempts to create a game with a mismatched `creator` field.
     * @principle Enforces creator-only write access to games. Allows any authenticated user to read games.
     */
    match /games/{gameId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn() && request.resource.data.creator == request.auth.uid;
      allow update, delete: if isExistingOwner(resource.data.creator);
    }

    /**
     * @description Rules for the /games/{gameId}/players/{userId} subcollection.
     * @path /games/{gameId}/players/{userId}
     * @allow (get) - The player can read their own player document.
     * @allow (create) - The player can create their own player document if the userId matches their auth.
     * @allow (update) - The player can update their own player document.
     * @allow (delete) - The player can delete their own player document.
     * @allow (list) - Only the owner can list players.
     * @deny (get) - A different user tries to read another player's document.
     * @deny (create) - A user attempts to create a player document with a mismatched userId.
     * @deny (update) - A user attempts to update another player's document.
     * @deny (delete) - A user attempts to delete another player's document.
     * @principle Restricts access to a player's own data within a game, enforces userId consistency.
     */
    match /games/{gameId}/players/{userId} {
      allow get: if isOwner(userId);
      allow list: if false; // listing players not allowed

      allow create: if isOwner(userId) && request.resource.data.userId == request.auth.uid;
      allow update: if isExistingOwner(userId) && resource.data.userId == request.auth.uid;
      allow delete: if isExistingOwner(userId) && resource.data.userId == request.auth.uid;
    }

    /**
     * @description Rules for the /events/{eventId} collection.
     * @path /events/{eventId}
     * @allow (get, list) - Any signed-in user can read any event.
     * @allow (create, update, delete) - No client-side creation/modification allowed.
     * @deny (create, update, delete) - All create, update, and delete operations are denied.
     * @principle Restricts write access to game events, allowing only read access for signed-in users.
     */
    match /events/{eventId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if false;
    }
  }
}