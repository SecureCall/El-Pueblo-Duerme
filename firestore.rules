/**
 * @fileOverview Firestore Security Rules for "El Pueblo Duerme" (The Village Sleeps).
 *
 * Core Philosophy:
 * This ruleset prioritizes secure authorization based on user identity and data relationships.
 * It enforces strict ownership and shared access patterns where appropriate, but relaxes data validation
 * to facilitate rapid prototyping.
 *
 * Data Structure:
 * - /games/{gameId}: Stores game instances, with the 'creator' field linking to the User who created the game.
 * - /games/{gameId}/players/{userId}: Stores player data for each game. Uses denormalization ('gameId') for authorization independence.
 * - /events/{eventId}: Stores game events. Public read access, restricted write access.
 *
 * Key Security Decisions:
 * - User listing is implicitly denied.
 * - Data validation is minimized in favor of authorization enforcement during prototyping.
 * - Access to game players is restricted to authenticated users.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to game documents. Games can be read by anyone.
     *  Games can only be created by authenticated users, with creator set to their user ID.
     *  Games can only be updated/deleted by their creator.
     * @path /games/{gameId}
     * @allow (read) Anyone can read games.
     * @allow (create) Authenticated user creates a new game with creator == request.auth.uid.
     * @allow (update) Creator updates a game.
     * @allow (delete) Creator deletes a game.
     * @deny (create) An unauthenticated user tries to create a game.
     * @deny (update) A non-creator attempts to update a game.
     * @deny (delete) A non-creator attempts to delete a game.
     * @principle Public read, owner-only writes, relational integrity for creator.
     */
    match /games/{gameId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.creator == request.auth.uid;
      allow update: if isSignedIn() && resource.data.creator == request.auth.uid;
      allow delete: if isSignedIn() && resource.data.creator == request.auth.uid;
    }

    /**
     * @description Controls access to player documents within a game.
     *  Players can be created, read, updated, and deleted by authenticated users.
     * @path /games/{gameId}/players/{userId}
     * @allow (create) Authenticated user creates a player.
     * @allow (get) Authenticated user gets a player.
     * @allow (list) Authenticated user lists players in a game.
     * @allow (update) Authenticated user updates a player.
     * @allow (delete) Authenticated user deletes a player.
     * @deny (create) Unauthenticated user tries to create a player.
     * @deny (get) Unauthenticated user tries to get a player.
     * @deny (list) Unauthenticated user tries to list players.
     * @deny (update) Unauthenticated user tries to update a player.
     * @deny (delete) Unauthenticated user tries to delete a player.
     * @principle Authenticated users only.
     */
    match /games/{gameId}/players/{userId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();

      // function isExistingPlayer(userId, gameId) {
      //   return resource.data.userId == request.auth.uid && resource.data.gameId == gameId;
      // }
    }

    /**
     * @description Controls access to game event (log) documents.
     *  Events can be read by anyone.
     *  Events can only be created by the server.
     * @path /events/{eventId}
     * @allow (read) Anyone can read game events.
     * @deny (create) No one can create a game event.
     * @deny (update) No one can update game events.
     * @deny (delete) No one can delete game events.
     * @principle Public read, server-only writes.
     */
    match /events/{eventId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    function isSignedIn() {
      return request.auth != null;
    }
  }
}