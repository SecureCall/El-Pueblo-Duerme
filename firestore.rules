/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a shared-access model for games, where any authenticated user can read game details,
 * but only members of a game can modify it.  Player data is managed within each game document, with
 * player-specific information accessible only to the respective player. Game events are publicly readable but
 * write-protected.
 *
 * Data Structure:
 * - /games/{gameId}: Stores game metadata, including a list of player IDs.
 * - /games/{gameId}/players/{userId}: Stores individual player data within a game.
 * - /events/{eventId}: Stores event logs for all games.
 *
 * Key Security Decisions:
 * - Anyone can read game and event data.
 * - Only game members can modify games.
 * - Players can only manage their own player data.
 * - No user listing is allowed.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows reading and writing of game data to members of the game.
     * @path /games/{gameId}
     * @allow (get, list) Any authenticated user can read game data.
     * @allow (create, update, delete) Only members of the game (listed in the 'players' array) can modify game data.
     * @deny   (create, update, delete) Non-members cannot modify game data.
     * @principle Shared access: Only game members can modify game data.
     */
    match /games/{gameId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isGameMember(gameId) {
        return isSignedIn() && request.auth.uid in get(/databases/$(database)/documents/games/$(gameId)).data.players;
      }

      allow get, list: if true;
      allow create, update, delete: if isGameMember(gameId);
    }

    /**
     * @description Allows each player to manage their own data within a game.
     * @path /games/{gameId}/players/{userId}
     * @allow (get, list) Only the user with matching userId can read the player data.
     * @allow (create, update, delete) Only the user with matching userId can modify the player data.
     * @deny   (get, list) Other users cannot read player data.
     * @deny   (create, update, delete) Other users cannot modify player data.
     * @principle Ownership: Players can only manage their own data.
     */
    match /games/{gameId}/players/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }

      allow get, list: if isOwner(userId);
      allow create, update, delete: if isOwner(userId);
    }

    /**
     * @description Allows public read access to game events but restricts write access.
     * @path /events/{eventId}
     * @allow (get, list) Any authenticated user can read game events.
     * @deny  (create, update, delete) No one can create, update, or delete game events through the client.
     * @principle Public Read, Restricted Write: Game events are publicly readable but write-protected.
     */
    match /events/{eventId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }
  }
}