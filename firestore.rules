/**
 * @file Firestore Security Rules
 * @description This ruleset defines access control for the El Pueblo Duerme application.
 *
 * Core Philosophy:
 *  - This ruleset prioritizes security by default, restricting access unless explicitly granted.
 *  - It uses a combination of ownership-based and role-based access control.
 *  - It validates the integrity of relationships between documents.
 *
 * Data Structure:
 *  - Games are stored in the `/games/{gameId}` collection.
 *  - Players in each game are stored in the `/games/{gameId}/players/{userId}` subcollection.
 *  - Game events are stored in the `/events/{eventId}` collection.
 *
 * Key Security Decisions:
 *  - User listing is disabled.
 *  - Owner-only access is enforced for game creation, updates, and deletion.
 *  - Players can only read their own player document.
 *  - Game events are readable by any authenticated user, but are created by the application only.
 *
 * Denormalization for Authorization:
 *  - Player documents include the `gameId` to allow rules to independently authorize access based on game membership without requiring additional `get()` calls.
 *
 * Structural Segregation:
 *  - There are not any examples in this data structure.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows managing game instances.
     * @path /games/{gameId}
     * @allow (create) User with UID 'user_abc' can create a game where request.resource.data.creator == 'user_abc'.
     * @allow (update) User with UID 'user_abc' can update a game they created.
     * @allow (delete) User with UID 'user_abc' can delete a game they created.
     * @deny (create) User with UID 'user_xyz' cannot create a game where request.resource.data.creator != 'user_xyz'.
     * @deny (update) User with UID 'user_xyz' cannot update a game created by 'user_abc'.
     * @deny (delete) User with UID 'user_xyz' cannot delete a game created by 'user_abc'.
     * @principle Enforces document ownership for writes.
     */
    match /games/{gameId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && request.resource.data.creator == request.auth.uid;
      allow update: if isSignedIn() && isExistingOwner(resource.data.creator);
      allow delete: if isSignedIn() && isExistingOwner(resource.data.creator);
    }

    /**
     * @description Allows managing player data within a game.
     * @path /games/{gameId}/players/{userId}
     * @allow (get) User with UID 'user_abc' can read their own player data in game 'game_123'.
     * @allow (create) User with UID 'user_abc' can create their own player data with request.resource.data.userId == 'user_abc'.
     * @deny (create) User with UID 'user_xyz' cannot create player data with request.resource.data.userId != 'user_xyz'.
     * @deny (update) User with UID 'user_xyz' cannot update player data for 'user_abc'.
     * @deny (delete) Only the server deletes this.
     * @principle Restricts access to a user's own player data and validates relational integrity.
     */
    match /games/{gameId}/players/{userId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == request.auth.uid && request.resource.data.gameId == gameId;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows reading game events.  Write access is restricted to the application.
     * @path /events/{eventId}
     * @allow (get) Any authenticated user can read a game event.
     * @allow (list) Any authenticated user can list game events.
     * @deny (create) No one can create an event.
     * @deny (update) No one can update an event.
     * @deny (delete) No one can delete an event.
     * @principle Grants public read access but restricts writes to the application.
     */
    match /events/{eventId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }
  }
}