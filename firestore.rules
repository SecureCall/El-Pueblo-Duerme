/**
 * @fileoverview Firestore Security Rules for "El Pueblo Duerme"
 *
 * Core Philosophy:
 * This ruleset prioritizes security by enforcing strict ownership and access controls.
 * Data validation is relaxed in this prototyping phase to allow for rapid iteration.
 *
 * Data Structure:
 * - /games/{gameId}: Stores game instances.
 * - /games/{gameId}/players/{userId}: Stores player data associated with each game.
 * - /events/{eventId}: Stores game event logs, with restricted write access.
 *
 * Key Security Decisions:
 * - Users can only create, update, or delete games they own (where the 'creator' field matches their UID).
 * - Players can only be added to a game by the game creator.
 * - Game event logs can only be written by a service account (simulated by checking for a specific claim).  In the meantime, all events are public.
 * - Listing of players within a game is allowed for any authenticated user.
 *
 * Denormalization for Authorization:
 * - The 'Player' entity contains a 'gameId' field, denormalized from the parent '/games/{gameId}' document. This allows rules to validate that the player is indeed associated with the correct game without performing extra reads.
 *
 * Structural Segregation:
 * - The application uses different collections for different access patterns. Publicly readable game data is stored separately from private user data.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to game documents.
     * @path /games/{gameId}
     * @allow (create) User with UID 'user_abc' can create a game where request.resource.data.creator == 'user_abc'.
     * @deny (create) User with UID 'user_xyz' cannot create a game where request.resource.data.creator != 'user_xyz'.
     * @allow (get, list) Any user can read game data.
     * @allow (update, delete) User with UID 'user_abc' can update/delete a game where resource.data.creator == 'user_abc'.
     * @deny (update, delete) User with UID 'user_xyz' cannot update/delete a game where resource.data.creator != 'user_xyz'.
     * @principle Enforces document ownership for writes; allows public reads.
     */
    match /games/{gameId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.creator == request.auth.uid;
      allow update, delete: if isSignedIn() && isExistingOwner(resource.data.creator);
    }

    /**
     * @description Controls access to player documents within a game.
     * @path /games/{gameId}/players/{userId}
     * @allow (create) User with UID 'game_creator' can create a player document under game '{gameId}' IF the user is the creator of the game.
     * @deny (create) User with UID 'other_user' cannot create a player document under game '{gameId}' IF the user is not the creator of the game.
     * @allow (get, list) Any authenticated user can read the list of players within the game.
     * @allow (update, delete) User with UID 'game_creator' can update/delete player document under game '{gameId}' IF the user is the creator of the game.
     * @deny (update, delete) User with UID 'other_user' cannot update/delete a player document under game '{gameId}' IF the user is not the creator of the game.
     * @principle Enforces owner-only writes for player data.
     */
    match /games/{gameId}/players/{userId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn() && isGameCreator(gameId);
      allow update, delete: if isSignedIn() && isGameCreator(gameId) && resource != null;
    }

    /**
     * @description Controls access to game event logs.
     * @path /events/{eventId}
     * @allow (get, list) Any authenticated user can read the game event logs.
     * @deny (create, update, delete) No client-side writes allowed for events. Events are reserved for backend processes.
     * @principle Restricts write access to game event logs, allowing public reads.
     */
    match /events/{eventId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Implement service account check for write access to events.
    }

    // --- Helper Functions ---

    /**
     * @description Checks if the user is signed in.
     * @return {bool} True if the user is authenticated, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user is the owner of the resource based on the provided userId.
     * @param {string} userId - The user ID to compare against the request's authentication UID.
     * @return {bool} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the user is the owner of the resource and that the resource exists.
     * @param {string} userId - The user ID to compare against the resource's owner ID.
     * @return {bool} True if the user is the owner and the resource exists, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Checks if the current user is the creator of the game.
     * @param {string} gameId - The ID of the game to check.
     * @return {bool} True if the user is the game creator, false otherwise.
     */
    function isGameCreator(gameId) {
      return get(/databases/$(database)/documents/games/$(gameId)).data.creator == request.auth.uid;
    }
  }
}