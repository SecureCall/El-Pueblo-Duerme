/**
 * @fileOverview Firestore Security Rules for "El Pueblo Duerme"
 *
 * Core Philosophy:
 * This ruleset prioritizes security by enforcing strict ownership and access controls.
 * Data access is primarily based on user authentication and explicit relationships between users and data.
 *
 * Data Structure:
 * - /games/{gameId}: Stores game instances, accessible only to authenticated users.
 * - /games/{gameId}/players/{userId}: Stores player data for each game, accessible only to authenticated users and game creator.
 * - /events/{eventId}: Stores game events, accessible to any authenticated user for reading.
 *
 * Key Security Decisions:
 * - Listing users is disallowed to prevent enumeration.
 * - `get` operations are allowed to return "Not Found" errors, while `update` and `delete` operations require the document to exist.
 * - Role based access control is not used in this version of the rules. All write access is controlled via the `creator` field.
 *
 * Denormalization for Authorization:
 *  - Player documents contain both `gameId` and `userId` to allow direct authorization checks without additional `get()` calls.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows access to game documents.
     * @path /games/{gameId}
     * @allow (get, list): Any authenticated user can read a game.
     * @allow (create): Any authenticated user can create a game, provided they are the creator.
     * @allow (update, delete): Only the user who created the game can update or delete it.
     * @deny create: if request.resource.data.creator != request.auth.uid
     * @deny update: if request.resource.data.creator != resource.data.creator
     * @deny delete: if resource.data.creator != request.auth.uid
     * @principle Enforces owner-only writes and validates creator on creation.
     */
    match /games/{gameId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
          return isSignedIn() && isOwner(userId) && resource != null;
      }

      allow get, list: if isSignedIn();
      allow create: if isSignedIn() && request.resource.data.creator == request.auth.uid;
      allow update: if isExistingOwner(resource.data.creator);
      allow delete: if isExistingOwner(resource.data.creator);
    }

    /**
     * @description Manages player access within a game.
     * @path /games/{gameId}/players/{userId}
     * @allow (get, list): Any authenticated user can list players of a game.
     * @allow (create): Any authenticated user can create their own player document within a game.
     * @allow (update, delete): Only the player (user) can update or delete their own player document.
     * @deny create: if request.resource.data.userId != request.auth.uid
     * @deny update: if request.resource.data.userId != resource.data.userId
     * @deny delete: if resource.data.userId != request.auth.uid
     * @principle Restricts player data access to the player themselves.
     */
    match /games/{gameId}/players/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
          return isSignedIn() && isOwner(userId) && resource != null;
      }

      allow get, list: if isSignedIn();
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if isExistingOwner(request.resource.data.userId);
      allow delete: if isExistingOwner(request.resource.data.userId);
    }

    /**
     * @description Allows access to game event logs.
     * @path /events/{eventId}
     * @allow (get, list): Any authenticated user can read game events.
     * @allow (create, update, delete): No one can create, update, or delete a game event.
     * @principle Allows public read access but restricts write access.
     */
    match /events/{eventId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get, list: if isSignedIn();
      allow create, update, delete: if false;
    }
  }
}