/**
 * @fileoverview Firestore Security Rules for "El Pueblo Duerme" Prototyping Mode
 *
 * Core Philosophy:
 * This ruleset prioritizes a secure authorization model while maintaining flexibility in data shapes for rapid iteration.
 * It enforces strict user-ownership and role-based access control where applicable but avoids overly strict schema validation.
 *
 * Data Structure:
 * - `/games/{gameId}`: Stores game instances.
 * - `/games/{gameId}/players/{userId}`: Stores player data for each game.
 * - `/events/{eventId}`: Stores game events (logs).
 *
 * Key Security Decisions:
 * - User listing is disabled.
 * - Ambiguous relationships default to strict owner-only access.
 * - Data consistency between paths and document content is enforced for ownership.
 *
 * Denormalization for Authorization:
 * The 'Player' entity denormalizes 'gameId' to allow for independent security rules, enhancing performance and security.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user's ID matches the provided user ID.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user's ID matches the resource's creator ID.
     */
    function isResourceOwner(resourceCreatorId) {
      return request.auth.uid == resourceCreatorId;
    }

    /**
     * @description Checks if the authenticated user is the owner of the existing document.
     */
    function isExistingOwner(resourceCreatorId) {
      return resource.data.creator == resourceCreatorId;
    }

    /**
     * @description Rules for the /games/{gameId} collection.
     * @path /games/{gameId}
     * @allow (create) User 'user_abc' can create a game where request.resource.data.creator == 'user_abc'.
     * @deny (create) User 'user_xyz' cannot create a game where request.resource.data.creator == 'user_abc'.
     * @allow (get, list) Any signed-in user can read game data.
     * @allow (update, delete) Only the game creator can modify or delete the game.
     * @deny (update, delete) User 'user_xyz' cannot update game created by 'user_abc'.
     * @principle Enforces document ownership for writes; allows public reads.
     */
    match /games/{gameId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn() && request.resource.data.keys().hasAll(['creator']) && request.resource.data.creator == request.auth.uid;
      allow update, delete: if isSignedIn() && resource.data.creator == request.auth.uid;
    }

    /**
     * @description Rules for the /games/{gameId}/players/{userId} subcollection.
     * @path /games/{gameId}/players/{userId}
     * @allow (create) User 'user_abc' can create their player document in game 'game_123' if request.resource.data.userId == 'user_abc' && request.resource.data.gameId == 'game_123'.
     * @deny (create) User 'user_xyz' cannot create a player document for user 'user_abc' in any game.
     * @allow (get, list) Any signed-in user can read player data in a game.
     * @allow (update, delete) Only the player (user) themselves can modify or delete their player document.
     * @deny (update, delete) User 'user_xyz' cannot update player document for user 'user_abc'.
     * @principle Enforces document ownership and validates relational integrity.
     */
    match /games/{gameId}/players/{userId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn() && request.resource.data.keys().hasAll(['userId', 'gameId']) && request.resource.data.userId == request.auth.uid && request.resource.data.gameId == gameId;
      allow update, delete: if isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Rules for the /events/{eventId} collection.
     * @path /events/{eventId}
     * @allow (get, list) Any signed-in user can read events data.
     * @deny (create, update, delete) No user can create, update, or delete event data.
     * @principle Restricts write access to events; allows public reads.
     */
    match /events/{eventId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if false;
    }
  }
}