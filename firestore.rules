/**
 * @fileoverview Firestore Security Rules for "El Pueblo Duerme"
 *
 * Core Philosophy:
 * This ruleset prioritizes security and authorization independence through data denormalization.
 * It ensures that users can only access data they are explicitly authorized to view or modify,
 * minimizing the need for complex queries or `get()` calls within the rules.
 *
 * Data Structure:
 * - /games/{gameId}: Stores general game information.
 * - /games/{gameId}/players/{userId}: Stores player-specific data for each game.
 * - /games/{gameId}/logs/{logId}: Stores game logs (write-access restricted to server-side code).
 *
 * Key Security Decisions:
 * - Players can only access their own player data within a given game.
 * - Game creation/modification is limited to the game creator.
 * - Game log writes are restricted to the server for data integrity.
 * - Read access to the game logs is public for debugging/auditing purposes.
 * - No user listing is allowed.
 *
 * Denormalization for Authorization:
 * - The `gameId` is included in each player document to ensure authorization independence. This avoids the need for `get()` calls to the parent `/games/{gameId}` document to verify game membership.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Manages access to game instances.
     * @path /games/{gameId}
     * @allow get, list: Any authenticated user can read all games.
     * @allow create: Only the game creator can create games and creator field is equal to authenticated user.
     * @allow update, delete: Only the game creator can update/delete games.
     * @deny create: If the `creator` field in the data does not match the authenticated user's UID.
     * @deny update: If the game does not exist
     * @deny delete: If the game does not exist
     * @principle Enforces game ownership for writes.
     */
    match /games/{gameId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isSignedIn() && isOwner(userId) && resource != null;
      }

      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.creator == request.auth.uid;
      allow update: if isExistingOwner(resource.data.creator);
      allow delete: if isExistingOwner(resource.data.creator);
    }

    /**
     * @description Manages access to player data within a specific game.
     * @path /games/{gameId}/players/{userId}
     * @allow get: Only the player with the matching userId can read their data.
     * @allow list: Only the game creator can list the game's players.
     * @allow create: Only the player with the matching userId can create their data.
     * @allow update, delete: Only the player with the matching userId can update/delete their data. The game must exist before the player can perform either action.
     * @deny create: If the `userId` field in the data does not match the authenticated user's UID or the 'gameId' does not match the path.
     * @deny update: If the game does not exist.
     * @deny delete: If the game does not exist.
     * @principle Enforces player ownership and relational integrity.
     */
    match /games/{gameId}/players/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isSignedIn() && isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false; // Listing players denied due to lack of role or explicit "creator" property on game resource
      allow create: if isOwner(userId) && request.resource.data.userId == request.auth.uid && request.resource.data.gameId == gameId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == userId;
      allow delete: if isExistingOwner(userId) && request.resource.data.userId == userId;
    }

    /**
     * @description Manages access to game logs.
     * @path /games/{gameId}/logs/{logId}
     * @allow get, list: Any authenticated user can read the logs.
     * @deny create, update, delete: Only server-side code can write logs.
     * @principle Restricts write access to the server.
     */
    match /games/{gameId}/logs/{logId} {
      function isSignedIn() {
        return request.auth != null;
      }
      allow get, list: if isSignedIn();
      allow create, update, delete: if false;
    }
  }
}