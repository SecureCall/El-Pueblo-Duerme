/**
 * @file Firebase Security Rules for El Pueblo Duerme.
 *
 * @corePhilosophy This ruleset enforces a combination of ownership-based and shared-access security models.
 *  - Users have full control over their own data.
 *  - Games have an owner, and only the owner can modify the game's settings or delete the game.
 *  - Players within a game can only read game events, but only the server can write them.
 *
 * @dataStructure
 *  - /games/{gameId}: Stores game metadata.
 *  - /games/{gameId}/players/{userId}: Stores player-specific data for a given game.
 *  - /events/{eventId}: Stores game events (logs).
 *
 * @keySecurityDecisions
 *  - Listing all users is disallowed.
 *  - Game events are readable by any signed-in user but only writable by the server.
 *
 * @denormalizationForAuthorization
 *  - The 'Game' document has a 'creator' field that stores the userId of the game creator.
 *  - The 'Player' document stores both 'gameId' and 'userId' to simplify player-specific data access.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Grants access to game documents. Only the game creator can create, update, or delete a game. Any signed-in user can read game data.
     * @path /games/{gameId}
     * @allow (create) User 'alice' with uid 'alice_uid' can create a game if request.resource.data.creator == 'alice_uid'.
     * @allow (get, list) Any signed-in user can read the game document.
     * @deny (create) User 'bob' with uid 'bob_uid' cannot create a game if request.resource.data.creator == 'alice_uid'.
     * @deny (update, delete) User 'bob' with uid 'bob_uid' cannot update or delete 'alice's game.
     * @principle Enforces ownership for game modifications. Allows public read access to game information.
     */
    match /games/{gameId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.creator == request.auth.uid;
      allow update, delete: if isSignedIn() && get(/databases/$(database)/documents/games/$(gameId)).data.creator == request.auth.uid;
    }

    /**
     * @description Grants access to player documents within a game.  Only the player (user) can read/write their own player document.
     * @path /games/{gameId}/players/{userId}
     * @allow (create) User 'alice' with uid 'alice_uid' can create her player document in game 'game1' if request.auth.uid == 'alice_uid'.
     * @allow (get, list) User 'alice' with uid 'alice_uid' can read their player document in game 'game1'.
     * @deny (create, update, delete) User 'bob' with uid 'bob_uid' cannot modify 'alice's player document.
     * @principle Enforces user-ownership of player documents within a game.
     */
    match /games/{gameId}/players/{userId} {
      allow get, list: if isSignedIn() && request.auth.uid == userId;
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update, delete: if isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Grants read access to all authenticated users to game events, but restricts write access to the server only.
     * @path /games/{gameId}/events/{eventId}
     * @allow (get, list) Any signed-in user can read game events.
     * @deny (create, update, delete) No client-side writes allowed; events should only be created by a trusted server.
     * @principle Allows public read access to game events, but restricts write access to prevent client-side tampering.
     */
    match /games/{gameId}/events/{eventId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if false;
    }

    function isSignedIn() {
      return request.auth != null;
    }
  }
}