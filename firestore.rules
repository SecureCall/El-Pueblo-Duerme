/**
 * @fileoverview Firestore Security Rules for "El Pueblo Duerme" Application.
 *
 * Core Philosophy: This ruleset prioritizes security and authorization independence using data denormalization.
 * All rules strongly enforce user authentication and ownership where applicable.
 *
 * Data Structure:
 * - /games/{gameId}: Stores game instances.
 * - /games/{gameId}/players/{userId}: Stores player data within each game.
 * - /games/{gameId}/logs/{logId}: Stores game logs (server-writeable, publicly readable).
 *
 * Key Security Decisions:
 * - Games are publicly readable, but only the creator can modify them.
 * - Players can only access their own data within a game.
 * - Game logs are only writable by the server but are readable by any authenticated user for debugging.
 * - Data denormalization is used extensively (e.g., `gameId` in the `Player` document) to avoid costly `get()` calls in security rules.
 *
 * Denormalization for Authorization:
 * - The `Player` document includes a `gameId` field, allowing rules to validate that a player belongs to a specific game without needing to read the parent `Game` document.
 *
 * Structural Segregation:
 * - The `GameLogs` collection is separated to allow different read/write permissions (server-only writes, public reads).
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to the /games/{gameId} collection.
     * @path /games/{gameId}
     * @allow get, list: Any authenticated user can read games.
     * @allow create: Authenticated user can create a game. The 'creator' field must match the user's UID.
     * @allow update, delete: Only the game creator can modify or delete a game.
     * @deny create: If the 'creator' field does not match the user's UID.
     * @deny update, delete: If the user is not the game creator.
     * @principle Enforces public read access with owner-only writes and validates creator ID on create.
     */
    match /games/{gameId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn() && request.resource.data.creator == request.auth.uid;
      allow update, delete: if isSignedIn() && resource.data.creator == request.auth.uid;
    }

    /**
     * @description Controls access to the /games/{gameId}/players/{userId} collection.
     * @path /games/{gameId}/players/{userId}
     * @allow get: Player can get their own player data within a game.
     * @allow list: The game creator can list players.
     * @allow create: Player can create their own player data. The `userId` in the path must match the `userId` in the document. The `gameId` must also match the parent game.
     * @allow update, delete: Player can only update/delete their own player data.
     * @deny create: If the `userId` in the path does not match the `userId` in the document, or the gameId in the path doesn't match the document's gameId.
     * @deny update, delete: If the user is not the owner (userId in the path).
     * @principle Enforces document ownership and validates data consistency between the path and document fields.
     */
    match /games/{gameId}/players/{userId} {
      allow get: if isSignedIn() && request.auth.uid == userId;
      allow list: if isSignedIn() && get(/databases/$(database)/documents/games/$(gameId)).data.creator == request.auth.uid;
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update, delete: if isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Controls access to the /games/{gameId}/logs/{logId} collection.
     * @path /games/{gameId}/logs/{logId}
     * @allow get, list: Any authenticated user can read game logs.
     * @allow create, update, delete: No client-side writes are allowed. This is intended for server-side writes only.
     * @deny create, update, delete: All client write requests are denied.
     * @principle Restricts write access to server-side only, allows public reads.
     */
    match /games/{gameId}/logs/{logId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if false;
    }

    // ---- Helper Functions ----

    /**
     * @description Checks if the user is signed in.
     * @return {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user is the owner of the resource.
     * @param {string} userId - The user ID to compare against the authenticated user's ID.
     * @return {boolean} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is the owner of the resource and that the resource exists.
     * @param {string} userId - The user ID to compare against the authenticated user's ID.
     * @return {boolean} True if the user is the owner and the resource exists, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }
  }
}