/**
 * @file Firestore Security Rules for "El Pueblo Duerme"
 *
 * @core_philosophy This ruleset prioritizes security and authorization independence
 *   through data denormalization. It enforces access control based on game ownership
 *   and player identity, while allowing public read access to game and player data.
 *   Write access to game logs is strictly limited to the server.
 *
 * @data_structure
 *   /games/{gameId}: Stores game instances.
 *   /games/{gameId}/players/{userId}: Stores player data for each game.
 *   /games/{gameId}/logs/{logId}: Stores game logs.
 *
 * @key_security_decisions
 *   - Any authenticated user can read games.
 *   - Games can only be created/modified by their creator.
 *   - Players can only access their own data within a game.
 *   - Game logs can only be written by the server.
 *   - Data denormalization is used to avoid `get()` calls in security rules.
 *
 * @denormalization_for_authorization
 *   - The `players` subcollection includes `gameId` to allow for authorization
 *     without needing to fetch the parent game document.
 *
 * @structural_segregation
 *   - Game logs are stored separately to restrict write access and simplify auditing.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows reading all games by any authenticated user. Only the game creator can modify games.
     * @path /games/{gameId}
     * @allow (get, list) auth != null
     * @allow (create) request.auth.uid != null
     * @allow (update) request.auth.uid == resource.data.creator
     * @allow (delete) request.auth.uid == resource.data.creator
     * @deny (create) request.auth == null
     * @deny (update) request.auth == null || request.auth.uid != resource.data.creator
     * @deny (delete) request.auth == null || request.auth.uid != resource.data.creator
     * @principle Enforces game ownership for writes. Allows any authenticated user to read game information.
     */
    match /games/{gameId} {
      function isGameCreator() {
        return request.auth.uid == resource.data.creator;
      }

      function isNewGameCreator() {
        return request.auth.uid == request.resource.data.creator;
      }

      allow get, list: if true;
      allow create: if isSignedIn() && isNewGameCreator();
      allow update: if isSignedIn() && isGameCreator() && resource != null;
      allow delete: if isSignedIn() && isGameCreator() && resource != null;
    }

    /**
     * @description Ensures players can only access their own data within a given game.
     * @path /games/{gameId}/players/{userId}
     * @allow (get, list) request.auth.uid == userId
     * @allow (create) request.auth.uid == userId && request.resource.data.gameId == gameId && request.resource.data.userId == request.auth.uid
     * @allow (update) request.auth.uid == userId && resource.data.userId == request.auth.uid && resource != null
     * @allow (delete) request.auth.uid == userId && resource.data.userId == request.auth.uid && resource != null
     * @deny (create) request.auth == null || request.auth.uid != userId || request.resource.data.gameId != gameId
     * @deny (update) request.auth == null || request.auth.uid != userId || resource.data.userId != request.auth.uid
     * @deny (delete) request.auth == null || request.auth.uid != userId || resource.data.userId != request.auth.uid
     * @principle Enforces player-specific data access. Validates relational integrity between player and game.
     */
    match /games/{gameId}/players/{userId} {
      function isPlayer() {
        return request.auth.uid == userId;
      }

      function isValidNewPlayer() {
        return request.resource.data.gameId == gameId && request.resource.data.userId == request.auth.uid;
      }

      allow get, list: if isSignedIn() && isPlayer();
      allow create: if isSignedIn() && isPlayer() && isValidNewPlayer();
      allow update: if isSignedIn() && isPlayer() && resource.data.userId == request.auth.uid && resource != null;
      allow delete: if isSignedIn() && isPlayer() && resource.data.userId == request.auth.uid && resource != null;
    }

    /**
     * @description Restricts write access to game logs to server-side code, while allowing any authenticated user read access for debugging and auditing.
     * @path /games/{gameId}/logs/{logId}
     * @allow (get, list) auth != null
     * @allow (create) false
     * @allow (update) false
     * @allow (delete) false
     * @deny (create) auth != null
     * @deny (update) auth != null
     * @deny (delete) auth != null
     * @principle Restricts write access to the server. Grants public read access for debugging.
     */
    match /games/{gameId}/logs/{logId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    function isSignedIn() {
      return request.auth != null;
    }
  }
}