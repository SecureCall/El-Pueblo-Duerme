/**
 * @file Firestore Security Rules
 * @description This ruleset defines access control for the El Pueblo Duerme application.
 *
 * Core Philosophy:
 *  This ruleset prioritizes security and data ownership. It enforces strict access control based on user authentication and defined roles.
 *  It assumes a flexible data structure to allow for rapid prototyping.
 *
 * Data Structure:
 *  - /games/{gameId}: Stores game instances, accessible to authenticated users.
 *  - /games/{gameId}/players/{userId}: Stores player data for each game, accessible only to the specific user.
 *  - /events/{eventId}: Stores game events, publicly readable but writable only by a service account (simulated by denying all client writes).
 *
 * Key Security Decisions:
 *  - User listing is disallowed.
 *  - All write operations are protected by authentication checks.
 *  - Data schema validation is relaxed for prototyping but critical relational fields are validated.
 *  - Events are publicly readable (for now) but not writable by clients.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user ID matches the provided user ID.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user ID matches the resource's creator ID.
     */
    function isResourceOwner(resourceCreatorId) {
        return request.auth.uid == resourceCreatorId;
    }

    /**
     * @description Checks if the user is the owner of an existing document.
     * @details This function combines the ownership check with an existence check to prevent operations on non-existent documents.
     */
    function isExistingOwner(gameId) {
      return get(/databases/$(database)/documents/games/$(gameId)).data.creator == request.auth.uid;
    }

    /**
     * @description Gets the current document.
     */
    function getSelf() {
      return get(request.path);
    }

    /**
     * @description Rules for the /games/{gameId} collection.
     * @path /games/{gameId}
     * @allow (create) User 'user_abc' can create a new game document with creator field set to 'user_abc'.
     * @deny (create) User 'user_xyz' cannot create a game document with creator field set to 'user_abc'.
     * @principle Enforces user ownership for game creation.
     */
    match /games/{gameId} {
      allow get: if isSignedIn();
      allow list: if false;

      allow create: if isSignedIn() && request.resource.data.creator == request.auth.uid;
      allow update: if isSignedIn() && isExistingOwner(gameId);
      allow delete: if isSignedIn() && isExistingOwner(gameId);

      match /players/{userId} {
        allow get: if isSignedIn() && isOwner(userId);
        allow list: if false;

        allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId;
        allow update: if isSignedIn() && isOwner(userId);
        allow delete: if isSignedIn() && isOwner(userId);
      }
    }

    /**
     * @description Rules for the /events/{eventId} collection.
     * @path /events/{eventId}
     * @allow (get) Any authenticated user can read events.
     * @deny (create) No client-side writes are allowed.
     * @principle Provides public read access but restricts write access.
     */
    match /events/{eventId} {
      allow get: if true;
      allow list: if false;

      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }
  }
}