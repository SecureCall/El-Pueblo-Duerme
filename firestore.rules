/**
 * @file Firebase Security Rules for El Pueblo Duerme - Prototyping Mode
 *
 * @core_philosophy This ruleset prioritizes strict authorization and assumes a flexible data structure
 *   to enable rapid prototyping.  It enforces user ownership and shared access patterns.
 *   Schema validation is intentionally minimal, focusing only on fields essential for authorization.
 * @data_structure
 *   - /games/{gameId}: Stores game instances, with the 'creator' field indicating the owner.
 *   - /games/{gameId}/players/{userId}: Stores player data for each game, nested under the game.
 *   - /events/{eventId}: Stores game logs. Read is allowed for authenticated users, write is disallowed.
 * @key_security_decisions
 *   - User listing is disallowed.
 *   - Roles are not implemented at this time.
 * @denormalization_for_authorization
 *   - Player documents are nested under Games, enabling game-specific player management.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secure access to the root.  No access is allowed.
     * @path /
     * @allow (get): Never
     * @deny (get): Always
     * @principle Root access is disallowed for security.
     */
    match /{document=**} {
      allow read, write: if false;
    }

    /**
     * @description Manages access to game instances.  The creator can update and delete.  Anyone can read.
     * @path /games/{gameId}
     * @allow (get): Any authenticated user can read game data.
     * @allow (create): Any authenticated user can create a new game.
     * @allow (update): The user who created the game (creator field) can update it.
     * @allow (delete): The user who created the game can delete it.
     * @deny (create): A user cannot create a game with a creator field that does not match their auth.uid.
     * @deny (update): A user cannot update a game they did not create.
     * @deny (delete): A user cannot delete a game they did not create.
     * @principle Enforces document ownership for writes.
     */
    match /games/{gameId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.creator == request.auth.uid;
      allow update: if isSignedIn() && isExistingOwner(resource.data.creator);
      allow delete: if isSignedIn() && isExistingOwner(resource.data.creator);
    }

    /**
     * @description Manages access to player data within a specific game.
     * @path /games/{gameId}/players/{userId}
     * @allow (get): Any authenticated user can read player data within a game.
     * @allow (create): Any authenticated user can create their own player data within a game.
     * @allow (update): The user who owns the player data can update it.
     * @allow (delete): The user who owns the player data can delete it.
     * @deny (create): A user cannot create player data for another user.
     * @deny (update): A user cannot update player data for another user.
     * @deny (delete): A user cannot delete player data for another user.
     * @principle Enforces document ownership for player data.
     */
    match /games/{gameId}/players/{userId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if isSignedIn() && isExistingOwner(resource.data.userId);
      allow delete: if isSignedIn() && isExistingOwner(resource.data.userId);
    }

    /**
     * @description Manages access to game event logs. Read is public for authenticated users, write is disallowed.
     * @path /events/{eventId}
     * @allow (get): Any authenticated user can read game event logs.
     * @allow (list): Any authenticated user can list game event logs.
     * @deny (create): Game event logs cannot be created through client-side rules.
     * @deny (update): Game event logs cannot be updated through client-side rules.
     * @deny (delete): Game event logs cannot be deleted through client-side rules.
     * @principle Restricts write access to game event logs.
     */
    match /events/{eventId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if false;
    }

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }
  }
}