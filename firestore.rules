/**
 * @fileoverview Firestore Security Rules for 'El Pueblo Duerme' Prototyping.
 *
 * Core Philosophy:
 * This ruleset prioritizes secure authorization based on user identity and document ownership while allowing flexible data shapes for rapid prototyping.
 * It focuses on preventing unauthorized data access and modification. Data validation is minimized to allow for quick iteration.
 *
 * Data Structure:
 * - /games/{gameId}: Stores individual game instances.
 * - /games/{gameId}/messages/{messageId}: Stores chat messages for a game.
 *
 * Key Security Decisions:
 * - User listing is disallowed to prevent information disclosure.
 * - All write operations are restricted to authenticated users and validated for proper ownership.
 * - The rules explicitly deny any potentially ambiguous operations.
 * - This assumes that the `creator` field in the `Game` entity represents the user who created the game.
 *
 * Denormalization for Authorization:
 * - The `Game` document stores the `creator` (User ID) so that the `isOwner()` function does not need to access other collections.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }

    /**
     * @description Secures the /games/{gameId} collection, enforcing creator-only write access and public read access.
     * @path /games/{gameId}
     * @allow (read): Any user can read game information.
     * @allow (create): Only the game creator can create a game. creator field must equal auth.uid.
     * @allow (update): Only the game creator can update game settings.
     * @allow (delete): Only the game creator can delete a game.
     * @deny (create): A user tries to create a game with a creator field that doesn't match their auth.uid.
     * @principle Enforces document ownership for writes, allows public reads.
     */
    match /games/{gameId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.creator == request.auth.uid;
      allow update: if isExistingOwner(resource.data.creator);
      allow delete: if isExistingOwner(resource.data.creator);
    }

    /**
     * @description Secures the /games/{gameId}/messages/{messageId} subcollection, allowing any signed in user to read and only game creator to write.
     * @path /games/{gameId}/messages/{messageId}
     * @allow (read): Any signed-in user can read game messages.
     * @allow (create): Only the game creator can create a message
     * @allow (update): Only the game creator can update game messages.
     * @allow (delete): Only the game creator can delete game messages.
     * @deny (create): A user tries to create a game message when not the game creator
     * @principle Restricts write access to game creators, allowing any signed in user to read.
     */
    match /games/{gameId}/messages/{messageId} {
        allow get, list: if isSignedIn();
        allow create: if isExistingOwner(get(/databases/$(database)/documents/games/{gameId}).data.creator);
        allow update: if isExistingOwner(get(/databases/$(database)/documents/games/{gameId}).data.creator) ;
        allow delete: if isExistingOwner(get(/databases/$(database)/documents/games/{gameId}).data.creator);
    }
  }
}