/**
 * @fileoverview Firestore Security Rules for El Pueblo Duerme.
 *
 * Core Philosophy:
 * This ruleset prioritizes secure access control for the 'El Pueblo Duerme' application.
 * It enforces ownership-based access for games and players, while also supporting
 * public read access to game events for auditing and logging purposes.
 *
 * Data Structure:
 * - /games/{gameId}: Stores individual game instances, accessible to game creators and players.
 * - /games/{gameId}/players/{userId}: Stores player-specific data within a game, accessible only to the player themselves.
 * - /events/{eventId}: Stores immutable game events.
 *
 * Key Security Decisions:
 * - Games: Only the creator can modify or delete a game.
 * - Players: Players can only manage their own player document within a game.
 * - GameEvents: Publicly readable but only writeable by server.
 *
 * Denormalization for Authorization:
 * - The `Player` entity includes `gameId` to enforce authorization rules independently without requiring additional `get()` calls.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to individual game documents.
     * @path /games/{gameId}
     * @allow (get) Any authenticated user can read a game document.
     * @allow (create) Only an authenticated user can create a game. The 'creator' field must match the user's UID.
     * @allow (update) Only the game creator can update a game.
     * @allow (delete) Only the game creator can delete a game.
     * @deny (create) An unauthenticated user cannot create a game.
     * @deny (update) A user who is not the game creator cannot update the game.
     * @deny (delete) A user who is not the game creator cannot delete the game.
     * @principle Enforces ownership for game management and allows public reads.
     */
    match /games/{gameId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn() && request.resource.data.creator == request.auth.uid;
      allow update: if isExistingOwner(resource.data.creator);
      allow delete: if isExistingOwner(resource.data.creator);
    }

    /**
     * @description Controls access to player documents within a game.
     * @path /games/{gameId}/players/{userId}
     * @allow (get) Any authenticated user can read a player document.
     * @allow (create) Only an authenticated user can create a player document. The 'userId' must match the authenticated user's UID.
     * @allow (update) Only the player can update their own document.
     * @allow (delete) A player can delete their own document.
     * @deny (create) A user cannot create a player document for another user.
     * @deny (update) A user cannot update another player's document.
     * @deny (delete) A user cannot delete another player's document.
     * @principle Enforces ownership for player data management.
     */
    match /games/{gameId}/players/{userId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to game event logs.
     * @path /events/{eventId}
     * @allow (get) Any authenticated user can read game event logs.
     * @allow (list) Any authenticated user can list game event logs.
     * @deny (create) No client-side creation of event logs.
     * @deny (update) No client-side updates of event logs.
     * @deny (delete) No client-side deletion of event logs.
     * @principle Provides public read access for auditing and restricts write access.
     */
    match /events/{eventId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
        return isSignedIn() && isOwner(userId) && resource != null;
    }
  }
}