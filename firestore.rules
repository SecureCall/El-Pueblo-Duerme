/**
 * @fileoverview Firestore Security Rules for "El Pueblo Duerme"
 *
 * Core Philosophy:
 * This ruleset prioritizes security and authorization independence through data denormalization.
 * It allows authenticated users to read game and player data, but restricts writes to maintain game integrity.
 * Server-side logic is responsible for managing game state and logs.
 *
 * Data Structure:
 * - /games/{gameId}: Stores game metadata, accessible for reading by all authenticated users.
 * - /games/{gameId}/players/{userId}: Stores player-specific data within a game, accessible only to the player.
 * - /games/{gameId}/logs/{logId}: Stores game logs, writable only by the server, readable by all authenticated users.
 *
 * Key Security Decisions:
 * - Public read access for games to allow easy discovery.
 * - Owner-only writes for games to ensure only the creator can modify the game.
 * - Player-only access to their own player data, enforced by matching the userId in the path.
 * - Server-only writes for logs to ensure data integrity.
 * - No user listing is allowed for any collection.
 *
 * Denormalization for Authorization:
 * - The `Player` entity includes a `gameId` field to enable authorization checks without requiring `get()` calls to the parent `/games/{gameId}` document.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to game documents.
     * @path /games/{gameId}
     * @allow (read) Authenticated user can read any game.
     * @allow (create) Authenticated user can create a game if the creator field matches their UID.
     * @allow (update) Authenticated user can update a game if they are the creator.
     * @allow (delete) Authenticated user can delete a game if they are the creator.
     * @deny (create) If the creator field does not match the user's UID.
     * @deny (update) If the user is not the creator.
     * @deny (delete) If the user is not the creator.
     * @principle Allows public read access, restricts writes to the game creator.
     */
    match /games/{gameId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn() && request.resource.data.creator == request.auth.uid;
      allow update: if isSignedIn() && isOwner(resource.data.creator);
      allow delete: if isSignedIn() && isExistingOwner(resource.data.creator);
    }

    /**
     * @description Controls access to player documents within a game.
     * @path /games/{gameId}/players/{userId}
     * @allow (get) Authenticated user can read their own player data within a game.
     * @allow (create) Authenticated user can create their own player data within a game if the userId field matches their UID.
     * @allow (update) Authenticated user can update their own player data within a game if the userId field matches their UID.
     * @allow (delete) Authenticated user can delete their own player data within a game if the userId field matches their UID.
     * @deny (create) If the userId field does not match the user's UID.
     * @deny (update) If the user is not the owner.
     * @deny (delete) If the user is not the owner.
     * @principle Enforces player-only access to their own data within a game.
     */
    match /games/{gameId}/players/{userId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid && request.resource.data.gameId == gameId;
      allow update: if isSignedIn() && isOwner(userId) && resource != null;
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Controls access to game log documents.
     * @path /games/{gameId}/logs/{logId}
     * @allow (read) Authenticated user can read any game log.
     * @deny (create) Writes are not allowed from the client.
     * @deny (update) Writes are not allowed from the client.
     * @deny (delete) Writes are not allowed from the client.
     * @principle Restricts write access to server-side code only, allows public read.
     */
    match /games/{gameId}/logs/{logId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    // --- Helper Functions ---

    /**
     * @description Checks if the user is signed in.
     * @return {bool} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user is the owner of the resource.
     * @param {string} userId The user ID to check against.
     * @return {bool} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the user is the owner of the resource and if the resource exists.
     * @param {string} userId The user ID to check against.
     * @return {bool} True if the user is the owner and the resource exists, false otherwise.
     */
    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }
  }
}