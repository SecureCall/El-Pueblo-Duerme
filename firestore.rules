rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    function isPlayerInGame(gameId, userId) {
      return get(/databases/$(database)/documents/games/$(gameId)).data.players.exists(p => p.userId == userId);
    }

    function isPlayerAlive(gameId, userId) {
        let player = get(/databases/$(database)/documents/games/$(gameId)).data.players.get(p => p.userId == userId, null);
        return player != null && player.isAlive == true;
    }
    
    function isGameCreator(gameId, userId) {
      return get(/databases/$(database)/documents/games/$(gameId)).data.creator == userId;
    }

    function getGamePhase(gameId) {
      return get(/databases/$(database)/documents/games/$(gameId)).data.phase;
    }
    
    match /games/{gameId} {
      allow read: if true;

      // CREACIÓN: Cualquiera puede crear una partida.
      allow create: if request.auth != null;

      // ACTUALIZACIÓN: Lógica compleja para las actualizaciones.
      allow update: if 
        // Permite al creador iniciar el juego.
        (request.resource.data.status == 'in_progress' && resource.data.status == 'waiting' && isGameCreator(gameId, request.auth.uid)) ||
        // Permite al creador reiniciar el juego.
        (request.resource.data.status == 'waiting' && resource.data.status == 'finished' && isGameCreator(gameId, request.auth.uid)) ||
        // Permite a cualquier jugador unirse si la partida está en espera.
        (request.resource.data.players.size() == resource.data.players.size() + 1 && getGamePhase(gameId) == 'waiting') ||
        // Permite a un jugador actualizar su propio 'lastActiveAt' o su avatar.
        (request.resource.data.diff(resource.data).affectedKeys().hasOnly(['players']) && request.resource.data.players.size() == resource.data.players.size() && isPlayerInGame(gameId, request.auth.uid)) ||
        // Permite al creador cambiar de fase o manejar acciones de máster.
        (isGameCreator(gameId, request.auth.uid)) ||
        // Permite al siguiente en la línea reclamar el rol de máster.
        (request.resource.data.creator != resource.data.creator && isPlayerInGame(gameId, request.auth.uid));

      // Las acciones de juego (votos, acciones nocturnas) se validan en las propias funciones de acción.
      // Aquí solo controlamos las escrituras directas al documento del juego.
      // Específicamente, prohibimos a los jugadores cambiar su propio rol o estado de vida.
      // La lógica del servidor (Cloud Functions/firebase-actions) es la única que debe poder hacerlo.
      // Esta regla es implícita: si ninguna de las condiciones de 'update' se cumple, la escritura se deniega.
    }
  }
}
