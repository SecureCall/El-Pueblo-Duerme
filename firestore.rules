/**
 * @fileoverview Firestore Security Rules for El Pueblo Duerme.
 *
 * Core Philosophy:
 * This ruleset prioritizes secure data access based on user authentication and
 * explicit ownership. It allows prototyping with flexible data shapes but
 * strictly enforces authorization.
 *
 * Data Structure:
 * - /games/{gameId}: Stores game instances.
 * - /games/{gameId}/players/{userId}: Stores player data for each game, nested under the game.
 * - /events/{eventId}: Stores game logs.
 *
 * Key Security Decisions:
 * - Players can only create their player document within a game.
 * - Game events are publicly readable, but not writable via the client.
 *
 * Denormalization for Authorization:
 * - The /games/{gameId}/players/{userId} path requires the gameId to determine which game the player belongs to. The Player entity includes the gameId in the data, and the create rule enforces that they match.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secures the `games` collection. Allows anyone to read game data.
     *              The creator can update and delete the game.
     * @path /games/{gameId}
     * @allow (get, list): Any user can read game data.
     * @allow (create): Any authenticated user can create a game, setting themselves as the creator.
     * @allow (update, delete): Only the creator of the game can modify or delete it.
     * @deny (create, update, delete):  Unauthenticated users cannot create, update, or delete games.
     * @principle Public read, owner-only writes.
     */
    match /games/{gameId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.creator == request.auth.uid;
      allow update, delete: if isSignedIn() && resource.data.creator == request.auth.uid && resource != null;
    }

    /**
     * @description Secures the `players` subcollection within a game.
     *              Allows creating a player document if the authenticated user's ID matches the `userId` in the path.
     * @path /games/{gameId}/players/{userId}
     * @allow (create): Authenticated user can create their player document if the userId matches their auth UID and gameId matches the path.
     * @allow (get, list, update, delete): No one can get, list, update or delete any player documents.
     * @deny (create): Creation is denied if the user is not authenticated, the userId does not match the authenticated user's ID, or the gameId does not match the path.
     * @principle Enforces ownership for player documents, path-based authorization.
     */
    match /games/{gameId}/players/{userId} {
      allow create: if isSignedIn() && request.auth.uid == userId && request.resource.data.gameId == gameId && request.resource.data.userId == request.auth.uid;
      allow get, list, update, delete: if false;
    }

    /**
     * @description Secures the `events` collection.  Allows anyone to read events.
     *              No one can create, update, or delete events via the client.
     * @path /events/{eventId}
     * @allow (get, list): Any user can read events.
     * @deny (create, update, delete): No one can create, update, or delete events via the client.
     * @principle Public read, no client writes.
     */
    match /events/{eventId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }
  }

  function isSignedIn() {
    return request.auth != null;
  }
}