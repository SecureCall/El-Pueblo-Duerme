/**
 * @file Overview
 * This ruleset enforces a role-based access control model for a multi-user game application, "El Pueblo Duerme."
 *
 * Data Structure:
 * - /games/{gameId}: Stores game instances, accessible only to game creators.
 * - /games/{gameId}/players/{userId}: Stores player data, accessible to the player and game creator.
 * - /events/{eventId}: Stores game logs. Write access is restricted. Read access is granted to any authenticated user.
 *
 * Key Security Decisions:
 * - Games: Only the creator can modify game settings or delete a game.
 * - Players: Players can only modify their own data within a game.
 * - Events: Write access to events is denied, and read access is granted to any signed-in user.
 *
 * Denormalization for Authorization:
 * - The `Player` entity denormalizes the `gameId` to enable independent rule evaluation at the `/games/{gameId}/players/{userId}` path.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to the /games/{gameId} collection.
     * @path /games/{gameId}
     * @allow (create) Authenticated user can create a new game, if creator field matches their UID.
     * @allow (get) Authenticated user can read any game.
     * @allow (update) Only the game creator can update the game.
     * @allow (delete) Only the game creator can delete the game.
     * @deny (create) Unauthenticated user cannot create a game.
     * @deny (update) A non-creator cannot update the game.
     * @deny (delete) A non-creator cannot delete the game.
     * @principle Enforces ownership: Only the creator can modify or delete a game.
     */
    match /games/{gameId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(creatorId) {
        return isSignedIn() && request.auth.uid == creatorId;
      }

      function isExistingOwner(creatorId) {
        return isOwner(creatorId) && resource != null;
      }

      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && request.resource.data.creator == request.auth.uid;
      allow update: if isExistingOwner(resource.data.creator);
      allow delete: if isExistingOwner(resource.data.creator);
    }

    /**
     * @description Controls access to the /games/{gameId}/players/{userId} collection.
     * @path /games/{gameId}/players/{userId}
     * @allow (create) Authenticated user can create their player entry, if the userId matches their UID.
     * @allow (get) Authenticated user can read a player's data.
     * @allow (list) Authenticated user can list players in a game.
     * @allow (update) Authenticated user can update their own player data, if the userId matches their UID.
     * @allow (delete) No one can delete a player document directly.
     * @deny (create) Unauthenticated user cannot create a player entry.
     * @deny (update) A user cannot update another player's entry.
     * @deny (delete) Deletion is always denied.
     * @principle Enforces user-level access control: Users can manage their own player data within a game.
     */
    match /games/{gameId}/players/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if true;
      allow list: if true;
      allow create: if isOwner(userId) && request.resource.data.userId == request.auth.uid;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == request.auth.uid;
      allow delete: if false;
    }

    /**
     * @description Controls access to the /events/{eventId} collection.
     * @path /events/{eventId}
     * @allow (get) Authenticated user can read any event.
     * @allow (list) Authenticated user can list events.
     * @deny (create) No one can create a new event.
     * @deny (update) No one can update an existing event.
     * @deny (delete) No one can delete an event.
     * @principle Restricts write access to game events, allowing read access for auditing and debugging.
     */
    match /events/{eventId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }
  }
}