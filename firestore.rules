/**
 * @fileoverview Firestore Security Rules for "El Pueblo Duerme"
 *
 * Core Philosophy:
 * This ruleset prioritizes security by enforcing strict ownership and access controls.
 * Users can only read and write their own data, and games can only be modified by their creator.
 * Public read access is granted to game event logs.
 *
 * Data Structure:
 * - /games/{gameId}: Stores game instances, accessible only to the game creator and players.
 * - /games/{gameId}/players/{userId}: Stores player-specific data within a game, accessible only to the player.
 * - /events/{eventId}: Stores game event logs, publicly readable but only writable by backend processes (not covered here).
 *
 * Key Security Decisions:
 * - User listing is explicitly denied to prevent information disclosure.
 * - Owner-only access is the default posture unless explicitly overridden.
 * - Data validation is minimized in the prototyping phase to allow for rapid schema iteration.
 *
 * Denormalization for Authorization:
 * - The 'Player' entity includes both 'userId' and 'gameId' to allow for direct authorization checks without requiring additional `get()` calls.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows the creator and players of a game to read game data. Only the creator can modify the game.
     * @path /games/{gameId}
     * @allow (get, list) if isSignedIn()
     * @allow (create, update, delete) if request.auth.uid == resource.data.creator
     * @deny (create, update, delete) if request.auth.uid != resource.data.creator
     * @principle Enforces game ownership for writes and shared access for reads.
     */
    match /games/{gameId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if request.auth.uid == request.resource.data.creator;
      allow update: if isExistingOwner(resource.data.creator);
      allow delete: if isExistingOwner(resource.data.creator);
    }

    /**
     * @description Allows a player to read and write their own player data within a game.
     * @path /games/{gameId}/players/{userId}
     * @allow (get, list) if isOwner(userId)
     * @allow (create, update, delete) if isOwner(userId)
     * @deny (create, update, delete) if !isOwner(userId)
     * @principle Enforces player ownership for all operations.
     */
    match /games/{gameId}/players/{userId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId && request.resource.data.gameId == gameId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId && request.resource.data.gameId == resource.data.gameId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows any authenticated user to read game event logs.  Write access is denied.
     * @path /events/{eventId}
     * @allow (get, list) if true
     * @deny (create, update, delete) if true
     * @principle Grants public read access to game events while restricting write access.
     */
    match /events/{eventId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }


    // ---- Helper functions ----

    /**
     * @description Checks if the current user is signed in.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the current user is the owner of the resource, based on userId.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

        /**
         * @description Checks if the current user is the owner of the resource, and that the resource exists.
         */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }
  }
}