/**
 * @fileoverview Firestore Security Rules for "El Pueblo Duerme" Game Application.
 *
 * Core Philosophy:
 * This ruleset prioritizes Authorization Independence via data denormalization.
 * Access is controlled based on user authentication and explicit ownership.
 *
 * Data Structure:
 * - /games/{gameId}: Game instances, accessible for reading by all authenticated users. Only the creator can modify.
 * - /games/{gameId}/players/{userId}: Player data for each game. Players can only access their own data.
 * - /games/{gameId}/logs/{logId}: Game logs, write-protected for server-side updates. Read access is open to authenticated users for debugging/auditing.
 *
 * Key Security Decisions:
 * - Denormalization: `gameId` is included in each `Player` document, avoiding `get()` calls for improved performance and security.
 * - Server-Only Writes: `GameLog` writes are exclusively for server-side code, ensuring reliable game state logging.
 * - List Security: Listing players is secure because the `players` subcollection is scoped to a specific `game`.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to the /games/{gameId} collection.
     * @path /games/{gameId}
     * @allow (get, list): Any authenticated user can read game information.
     * @allow (create): The game creator can create a game. The 'creator' field must match the user's UID.
     * @allow (update, delete): The game creator can update or delete a game.
     * @deny (create): If the 'creator' field does not match the user's UID.
     * @deny (update, delete): If the user is not the game creator or the document does not exist.
     * @principle Enforces game ownership for writes, allows public read access.
     */
    match /games/{gameId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.creator == request.auth.uid;
      allow update, delete: if isExistingOwner(resource.data.creator);
    }

    /**
     * @description Controls access to the /games/{gameId}/players/{userId} collection.
     * @path /games/{gameId}/players/{userId}
     * @allow (get): A player can only read their own player document.
     * @allow (list): The game creator can list the player documents.
     * @allow (create): A player can create their own player document if the userId matches their auth UID and the gameId is valid.
     * @allow (update, delete): A player can only update or delete their own player document, and the document must exist.
     * @deny (create): If the userId does not match their auth UID.
     * @deny (update, delete): If the userId does not match their auth UID or the document does not exist.
     * @principle Enforces player-specific data access within a game.
     */
    match /games/{gameId}/players/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isSignedIn(); // Any logged in user can list players in a game for now
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update, delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to the /games/{gameId}/logs/{logId} collection.
     * @path /games/{gameId}/logs/{logId}
     * @allow (get, list): Any authenticated user can read game logs.
     * @allow (create): Only the server (e.g., Cloud Functions with Admin SDK) can create game logs.
     * @deny (create, update, delete): All client-side writes are denied.
     * @principle Restricts write access to server-side code only, allows public read access.
     */
    match /games/{gameId}/logs/{logId} {
      function isSignedIn() {
        return request.auth != null;
      }
      allow get, list: if isSignedIn();
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }
  }
}