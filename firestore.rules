/**
 * @file Firebase Security Rules for El Pueblo Duerme.
 *
 * @corePhilosophy This ruleset enforces a combination of ownership-based and shared-access security models.
 *  - Games are created and managed by their creators.
 *  - Players within a game are managed via shared access.
 *  - GameEvents are publicly readable but can only be created through the backend.
 *
 * @dataStructure
 *  - /games/{gameId}: Stores game metadata, including the creator and list of players.
 *  - /games/{gameId}/players/{userId}: Stores player-specific data for each game.
 *  - /events/{eventId}: Stores all game events.
 *
 * @keySecurityDecisions
 *  - Users cannot be listed.
 *  - Listing events is allowed.
 *  - Flexible schema validation is enabled for prototyping, focusing on authorization.
 *
 * @denormalizationForAuthorization
 *  - Player documents under /games/{gameId}/players/{userId} include the userId in the document ID to simplify authorization checks without requiring extra reads.
 *
 * @structuralSegregation None.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secure games collection. Games can be created by authenticated users.
     *              Only the creator can update or delete a game.
     * @path /games/{gameId}
     * @allow (create) - Authenticated user can create a game. The creator field must match the user's UID.
     * @allow (update) - Only the creator of the game can update it.
     * @allow (delete) - Only the creator of the game can delete it.
     * @deny (create) - Non-authenticated user cannot create a game.
     * @deny (update) - A non-creator user cannot update the game.
     * @deny (delete) - A non-creator user cannot delete the game.
     * @principle Enforces document ownership for writes.
     */
    match /games/{gameId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && request.resource.data.creator == request.auth.uid;
      allow update: if isExistingOwner(resource.data.creator);
      allow delete: if isExistingOwner(resource.data.creator);
    }

    /**
     * @description Secure players subcollection within a game. Players can be added to a game.
     *              Only members of the game can list the players.
     * @path /games/{gameId}/players/{userId}
     * @allow (create) - Any authenticated user can create a player document where the userId matches the document ID.
     * @allow (get) - Any authenticated user can get a player document.
     * @allow (list) - Any authenticated user can list the players in the game.
     * @allow (update) - Only the player (user) can update their own player document.
     * @allow (delete) - Only the player (user) can delete their own player document.
     * @deny (create) - Non-authenticated user cannot create a player document.
     * @deny (create) - User cannot create a player document with a mismatched userId.
     * @deny (update) - A non-player user cannot update the player document.
     * @deny (delete) - A non-player user cannot delete the player document.
     * @principle Enforces user-specific data access within a game.
     */
    match /games/{gameId}/players/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Secure game events collection. Game events are publicly readable, but writes are restricted.
     * @path /events/{eventId}
     * @allow (get) - Any user can read game events.
     * @allow (list) - Any user can list game events.
     * @deny (create) - No user can create a game event. Only backend processes can create game events.
     * @deny (update) - No user can update a game event.
     * @deny (delete) - No user can delete a game event.
     * @principle Provides public read access with restricted write access for game events.
     */
    match /events/{eventId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }
  }
}