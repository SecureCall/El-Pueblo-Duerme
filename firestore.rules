/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a role-based access control model for the 'El Pueblo Duerme' application.
 *
 * Data Structure:
 * - /games/{gameId}: Stores game instances.
 * - /games/{gameId}/players/{userId}: Stores player data for each game.
 * - /events/{eventId}: Stores game logs.
 *
 * Key Security Decisions:
 * - Games: Only authenticated users can create games.
 * - Players: Players can only be created if the user ID matches the authenticated user's ID.
 * - Game Events: Any authenticated user can read game events.
 * - User listing is disabled to prevent data enumeration.
 *
 * Denormalization for Authorization:
 * - Player documents contain denormalized 'gameId' for authorization independence.
 *   This avoids the need for costly `get()` operations to verify the game ID.
 *
 * Structural Segregation:
 * - Game events are stored in a top-level collection (/events/{eventId}) instead of a subcollection under games (/games/{gameId}/events).
 *   This design decision allows for broader read access to game event data without compromising game data security.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user's ID matches the provided userId.
     * @param userId The user ID to compare against.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user's ID matches the document's 'creator' field.
     * @param creatorId The creator ID to compare against.
     */
    function isDocumentCreator(creatorId) {
        return request.auth.uid == creatorId;
    }

    /**
     * @description Checks if the user is the owner and the resource exists.
     * @param userId The user ID to compare against.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Defines rules for the /games/{gameId} collection.
     * @path /games/{gameId}
     * @allow (create) - Authenticated user creates a new game.
     * @deny (create) - Unauthenticated user attempts to create a game.
     * @principle Only authenticated users can create games.
     */
    match /games/{gameId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn();
      allow update: if false;
      allow delete: if false;

        /**
         * @description Defines rules for the /games/{gameId}/players/{userId} collection.
         * @path /games/{gameId}/players/{userId}
         * @allow (create) - Authenticated user with matching userId creates a player entry.
         * @deny (create) - Authenticated user attempts to create a player entry with a mismatched userId.
         * @principle Enforces document ownership for writes and validates relational integrity.
         */
        match /players/{userId} {
          allow get: if true;
          allow list: if true;
          allow create: if isOwner(userId);
          allow update: if isOwner(userId);
          allow delete: if isOwner(userId);
        }
    }

    /**
     * @description Defines rules for the /events/{eventId} collection.
     * @path /events/{eventId}
     * @allow (get, list) Authenticated user can read game events.
     * @deny (create, update, delete) No one can create, update or delete game events via the client.
     * @principle Restricts write access to game events, allowing only read access.
     */
    match /events/{eventId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }
  }
}