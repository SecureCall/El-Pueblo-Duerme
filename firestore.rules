/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a role-based access control model for the 'El Pueblo Duerme' application.
 *
 * Data Structure:
 * - /games/{gameId}: Stores game instances, with the 'creator' field indicating the game creator.
 * - /games/{gameId}/players/{userId}: Stores player data within a specific game.
 * - /events/{eventId}: Stores game event logs.
 *
 * Key Security Decisions:
 * - Users can only list players for a game.
 * - Game creation is open to authenticated users, but only the creator can modify the game.
 * - Game event logs are write-protected, allowing read access to authenticated users.
 *
 * Denormalization for Authorization:
 * - Player documents denormalize the 'gameId' to allow independent security checks without requiring parent document access.
 *
 * Structural Segregation:
 * - The application uses separate collections for games and game events, allowing for independent access control.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Manages access to game documents.
     * @path /games/{gameId}
     * @allow (create) - Any authenticated user can create a game.
     * @allow (get, list) - Any authenticated user can read game.
     * @allow (update, delete) - Only the game creator can update or delete a game.
     * @deny (create) - Unauthenticated users cannot create games.
     * @deny (update, delete) - Non-creators cannot modify games.
     * @principle Enforces owner-only writes for game updates and deletes.
     */
    match /games/{gameId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn();
      allow update, delete: if isExistingOwner(resource.data.creator);
    }

    /**
     * @description Manages access to player documents within a game.
     * @path /games/{gameId}/players/{userId}
     * @allow (create) - Any authenticated user can create player.
     * @allow (get, list) - Any authenticated user can list players for a game.
     * @allow (update, delete) - Only the game creator can update or delete a player.
     * @deny (create) - Unauthenticated users cannot create players.
     * @deny (update, delete) - Non-creators cannot modify players.
     * @principle Enforces owner-only writes for player updates and deletes.
     */
    match /games/{gameId}/players/{userId} {
        allow get, list: if isSignedIn();
        allow create: if isSignedIn();
        allow update, delete: if false;
    }

    /**
     * @description Manages access to game event log documents.
     * @path /events/{eventId}
     * @allow (get, list) - Any authenticated user can read event logs.
     * @deny (create, update, delete) - No one can create, update, or delete event logs through the client.
     * @principle Restricts write access to game event logs.
     */
    match /events/{eventId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if false;
    }

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }
  }
}