/**
 * @fileoverview Firestore Security Rules for El Pueblo Duerme.
 *
 * Core Philosophy:
 * This ruleset prioritizes secure data access based on user authentication and
 * resource ownership, while maintaining flexible data shapes for prototyping.
 *
 * Data Structure:
 * - /games/{gameId}: Stores game instances.
 * - /games/{gameId}/players/{userId}: Stores player data for each game.
 * - /events/{eventId}: Stores game events.
 *
 * Key Security Decisions:
 * - User listing is disallowed to protect user privacy.
 * - Read-only collections (e.g., /events) are publicly readable.
 * - Ambiguous relationships default to strict owner-only access.
 *
 * Denormalization for Authorization:
 * - The 'Player' entity includes a 'gameId' field, which is denormalized
 *   to simplify authorization checks within the /games/{gameId}/players/{userId}
 *   path, avoiding the need for extra `get()` calls.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Rules for the 'games' collection.
     * @path /games/{gameId}
     * @allow (create) Signed-in user can create a game with themself as the creator.
     * @deny (create) User attempts to create a game where creator doesn't match their auth.uid.
     * @allow (get, list) Anyone can read game data.
     * @allow (update, delete) Only the game creator can update or delete a game.
     * @principle Enforces creator-only write access to game documents after creation; public read access.
     */
    match /games/{gameId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.creator == request.auth.uid;
      allow update, delete: if isExistingOwner(resource.data.creator);
    }

    /**
     * @description Rules for the 'players' subcollection within a 'game'.
     * @path /games/{gameId}/players/{userId}
     * @allow (create) Signed-in user can create a player document for themself in a game.
     * @deny (create) User attempts to create a player document for another user.
     * @allow (get, list) Anyone can read player data.
     * @allow (update, delete) Only the player (identified by userId) can update or delete their player document.
     * @principle Enforces player-ownership within a game subcollection; public read access.
     */
    match /games/{gameId}/players/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

       function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid && request.resource.data.gameId == gameId;
      allow update, delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for the 'events' collection.
     * @path /events/{eventId}
     * @allow (get, list) Anyone can read event data.
     * @deny (create, update, delete) No one can create, update, or delete event data.
     * @principle Events are read-only for all users.
     */
    match /events/{eventId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }
  }
}