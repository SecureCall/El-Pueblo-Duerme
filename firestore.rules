/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a role-based access control model for the "El Pueblo Duerme" application.
 *
 * Data Structure:
 * - /games/{gameId}: Stores game instances.
 * - /games/{gameId}/players/{userId}: Stores player data for each game.
 * - /events/{eventId}: Stores game logs.
 *
 * Key Security Decisions:
 * - Users can only create games.
 * - Only authenticated users can read games or events.
 * - Only the game creator can update or delete a game.
 *
 * Denormalization for Authorization:
 * - The 'creator' field within a Game document is used to determine ownership.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows reading and owner-only modification of game documents.
     * @path /games/{gameId}
     * @allow (get, list): Any authenticated user can read games.
     * @allow (create): Any authenticated user can create games. The 'creator' field must match the user's UID.
     * @allow (update, delete): Only the game creator can update or delete the game.
     * @deny (create): An unauthenticated user attempts to create a game.
     * @deny (update, delete): A user who is not the game creator attempts to update or delete the game.
     * @principle Enforces document ownership for writes; allows public reads.
     */
    match /games/{gameId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isOwner(creatorId) {
        return isSignedIn() && request.auth.uid == creatorId;
      }
      function isExistingOwner(creatorId) {
        return isOwner(creatorId) && resource != null;
      }

      allow get, list: if isSignedIn();
      allow create: if isSignedIn() && request.resource.data.creator == request.auth.uid;
      allow update: if isExistingOwner(resource.data.creator);
      allow delete: if isExistingOwner(resource.data.creator);
    }

    /**
     * @description Allows reading and writing of player data only by the player or game creator.
     * @path /games/{gameId}/players/{userId}
     * @allow (get, list): Any authenticated user can read players.
     * @allow (create): Any authenticated user can create their player entry. The 'userId' must match the user's UID.
     * @allow (update, delete): Only the player or the game creator can update or delete the player entry.
     * @deny (create): An unauthenticated user attempts to create a player entry.
     * @deny (update, delete): A user who is not the player or the game creator attempts to update or delete the player entry.
     * @principle Enforces document ownership for writes; allows public reads.
     */
    match /games/{gameId}/players/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isGameCreator(gameId) {
        return get(/databases/$(database)/documents/games/$(gameId)).data.creator == request.auth.uid;
      }
      function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get, list: if isSignedIn();
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if isExistingOwner(userId) || isGameCreator(gameId);
      allow delete: if isExistingOwner(userId) || isGameCreator(gameId);
    }

    /**
     * @description Allows any authenticated user to read events but restricts writes.
     * @path /events/{eventId}
     * @allow (get, list): Any authenticated user can read events.
     * @allow (create, update, delete): No one can create, update, or delete events.
     * @deny (create, update, delete): Any user attempts to create, update, or delete an event.
     * @principle Restricts write access to game events; allows public reads.
     */
    match /events/{eventId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get, list: if isSignedIn();
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }
  }
}