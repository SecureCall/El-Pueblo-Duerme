/**
 * @fileOverview Firestore Security Rules for "El Pueblo Duerme" application.
 *
 * Core Philosophy:
 * This ruleset prioritizes secure data access based on user authentication and ownership. It enforces that users can only create games, and that they can only access data associated with games they are participating in or own.
 *
 * Data Structure:
 * - /games/{gameId}: Stores game instances, with 'creator' field indicating ownership.
 * - /games/{gameId}/players/{userId}: Stores player data for each game.
 * - /events/{eventId}: Stores game logs.
 *
 * Key Security Decisions:
 * - Games are created by authenticated users only, with the creator being the owner.
 * - Players data is secured by gameId and userId.
 * - Game events are publicly readable, write access is restricted to server-side only (or admin).
 * - Data shape validation is not enforced in this prototype ruleset.
 *
 * Denormalization for Authorization:
 * - The 'Player' documents at `/games/{gameId}/players/{userId}` should contain a denormalized `gameId` field matching the parent path. This allows the rule to validate the path without needing to `get()` the parent `Game` document.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to the 'games' collection. Ensures only authenticated users can create games, and that the creator field matches the authenticated user's ID.
     * @path /games/{gameId}
     * @allow (create) User with UID 'user123' can create a game where request.resource.data.creator == 'user123'.
     * @deny (create) User with UID 'user123' cannot create a game where request.resource.data.creator != 'user123'.
     * @allow (get, list) Any authenticated user can read the game data.
     * @deny (update, delete) Only the game creator can update or delete.
     * @principle Enforces game ownership for writes; allows public read access.
     */
    match /games/{gameId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.creator == request.auth.uid;
      allow update, delete: if isSignedIn() && isExistingOwner(resource.data.creator);
    }

    /**
     * @description Controls access to the 'players' subcollection within a game. Ensures that only the user with matching userId can manage their player data.
     * @path /games/{gameId}/players/{userId}
     * @allow (create) User 'user123' can create their player document under /games/game123/players/user123.
     * @deny (create) User 'user456' cannot create a player document under /games/game123/players/user123.
     * @allow (get, list) User can read or list only their own player data.
     * @deny (update, delete) Only the user with matching userId can update or delete their player data.
     * @principle Enforces strict player-data ownership based on userId.
     */
    match /games/{gameId}/players/{userId} {
      allow get, list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update, delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Controls access to the 'events' collection. Allows public read access. Write access is denied (assumed to be handled server-side).
     * @path /events/{eventId}
     * @allow (get, list) Any authenticated user can read game event data.
     * @deny (create, update, delete) No one can create, update, or delete game event data via client-side rules.
     * @principle Grants public read access while restricting write access.
     */
    match /events/{eventId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    // ---- Helper Functions ----

    /**
     * @description Checks if the user is signed in.
     * @returns {boolean} True if the user is authenticated, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user is the owner of the resource based on the provided userId.
     * @param {string} userId - The user ID to compare against the authenticated user's ID.
     * @returns {boolean} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

   /**
     * @description Checks if the authenticated user is the owner of an existing resource.
     * @param {string} userId - The user ID to compare against the authenticated user's ID.
     * @returns {boolean} True if the user is the owner and the resource exists.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }
  }
}