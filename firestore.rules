/**
 * @file Firestore Security Rules for "El Pueblo Duerme"
 *
 * @description This ruleset enforces a role-based access control model for the "El Pueblo Duerme" application. It emphasizes
 * authorization independence by denormalizing data to avoid costly `get()` calls in security rules.
 *
 * @dataStructure
 * - /games/{gameId}: Stores general game information.
 * - /games/{gameId}/players/{userId}: Stores player-specific data for each game.
 * - /games/{gameId}/logs/{logId}: Stores game logs.
 *
 * @keySecurityDecisions
 * - Games: Any authenticated user can read games. Game creation/modification is limited to the game creator.
 * - Players: Players can only access their own data within a given game.
 * - Game Logs: Write access is restricted to the server. Read access is granted to any authenticated user.
 * - No user listing is allowed at the root level.
 *
 * @denormalizationForAuthorization
 * - The `Player` entity includes a `gameId` property. This denormalization enables authorization independence,
 * allowing for simpler and more efficient security rules that do not require `get()` calls to the parent `Game` document.
 *
 * @structuralSegregation
 * - Game logs are stored in a subcollection under each game, ensuring that logs are namespaced to their respective games.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to the /games/{gameId} collection.
     * @path /games/{gameId}
     * @allow (get, list) Authenticated user can read games.
     * @allow (create) Authenticated user can create games where the creator field matches their UID.
     * @allow (update, delete) Only the game creator can update/delete games.
     * @deny (create) If the creator field does not match the authenticated user's UID.
     * @deny (update, delete) If the game does not exist.
     * @principle Enforces document ownership for writes; allows public reads.
     */
    match /games/{gameId} {
      // Allow anyone to read the game
      allow get, list: if true;

      // Allow create if the user is authenticated and the creator field matches the user's UID
      allow create: if isSignedIn() && request.resource.data.creator == request.auth.uid;

      // Allow update and delete if the user is the game creator and the game exists
      allow update, delete: if isSignedIn() && isExistingGameOwner(gameId);

      function isExistingGameOwner(gameId) {
        return exists(/databases/$(database)/documents/games/$(gameId)) && resource.data.creator == request.auth.uid;
      }
    }

    /**
     * @description Controls access to the /games/{gameId}/players/{userId} collection.
     * @path /games/{gameId}/players/{userId}
     * @allow (get, list) Players can only access their own data within a given game.
     * @allow (create) Authenticated user can create his own player profile
     * @allow (update, delete) Players can update/delete their own player profile.
     * @deny (create) If the userId field does not match the authenticated user's UID or the gameId does not match the parent game.
     * @deny (update, delete) If the player does not exist.
     * @principle Enforces document ownership for all operations.
     */
    match /games/{gameId}/players/{userId} {
      // Allow read access only to the player themselves
      allow get: if isSignedIn() && isPlayer(gameId, userId);
      allow list: if isSignedIn() && isGame(gameId);
      // Allow create if the user is authenticated and the userId field matches the user's UID
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid && request.resource.data.gameId == gameId;

      // Allow update and delete if the user is the player and the player exists
      allow update, delete: if isSignedIn() && isExistingPlayer(gameId, userId);

      function isPlayer(gameId, userId) {
          return request.auth.uid == userId && exists(/databases/$(database)/documents/games/$(gameId));
      }

      function isExistingPlayer(gameId, userId) {
        return exists(/databases/$(database)/documents/games/$(gameId)/players/$(userId)) && resource.data.userId == request.auth.uid;
      }

      function isGame(gameId) {
          return exists(/databases/$(database)/documents/games/$(gameId));
      }
    }

    /**
     * @description Controls access to the /games/{gameId}/logs/{logId} collection.
     * @path /games/{gameId}/logs/{logId}
     * @allow (get, list) Authenticated users can read game logs.
     * @deny (create, update, delete) All write access is denied to clients.
     * @principle Restricts write access to the server only; allows public reads for debugging.
     */
    match /games/{gameId}/logs/{logId} {
      // Allow anyone to read the game logs
      allow get, list: if true;

      // Deny all write access to clients
      allow create, update, delete: if false;
    }

    function isSignedIn() {
      return request.auth != null;
    }
  }
}