/**
 * @fileoverview Firestore Security Rules for "El Pueblo Duerme"
 *
 * Core Philosophy:
 * This ruleset prioritizes security by enforcing strict access control based on
 * game ownership and player participation. It assumes a closed collaboration model
 * for games, where only players within a game can access the game's data. Public
 * listing of games or game events is generally disallowed unless explicitly specified.
 *
 * Data Structure:
 * - /games/{gameId}: Stores game instances.
 * - /games/{gameId}/players/{userId}: Stores player-specific data for each game.
 * - /events/{eventId}: Stores game events.  Write access is very limited, read access may be broader.
 *
 * Key Security Decisions:
 * - Players can only list players in a game they are a part of.
 *
 * Denormalization for Authorization:
 * - The `Player` entity denormalizes `gameId` to enable independent authorization
 *   checks without requiring complex queries.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Rules for the /games/{gameId} collection.
     * @path /games/{gameId}
     * @allow (create) User with ID 'user1' can create a game where creator == 'user1'.
     * @deny (create) User with ID 'user2' cannot create a game where creator == 'user1'.
     */
    match /games/{gameId} {
      allow get: if true;
      allow list: if false;
      allow create: if isSignedIn() && request.resource.data.creator == request.auth.uid;
      allow update, delete: if false;
    }

    /**
     * @description Rules for the /games/{gameId}/players/{userId} subcollection.
     * @path /games/{gameId}/players/{userId}
     * @allow (list) User with ID 'user1' can list players if they are participating in the game 'game1'.
     * @deny (list) User with ID 'user2' cannot list players in game 'game1' if they are not a player in that game.
     */
    match /games/{gameId}/players/{userId} {
      allow get: if true; // TODO: Possibly restrict this to players in the game.
      allow list: if true; // Allow listing. The error suggests this was denied.
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid && request.resource.data.gameId == gameId;
      allow update: if isSignedIn() && request.auth.uid == userId;
      allow delete: if if false;
    }

    /**
     * @description Rules for the /events/{eventId} collection.
     * @path /events/{eventId}
     * @allow (get) Any signed-in user can read events.
     * @deny (create) No user can create events through the client.
     */
    match /events/{eventId} {
      allow get: if isSignedIn();
      allow list: if false;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }
  }
}